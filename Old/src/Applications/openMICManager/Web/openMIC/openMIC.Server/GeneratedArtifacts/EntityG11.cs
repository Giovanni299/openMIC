

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LightSwitchApplication
{
    #region Entities
    
    /// <summary>
    /// No Modeled Description Available
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
    public sealed partial class Measurement : global::Microsoft.LightSwitch.Framework.Base.EntityObject<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass>
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new instance of the Measurement entity.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Measurement()
            : this(null)
        {
        }
    
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Measurement(global::Microsoft.LightSwitch.Framework.EntitySet<global::LightSwitchApplication.Measurement> entitySet)
            : base(entitySet)
        {
            global::LightSwitchApplication.Measurement.DetailsClass.Initialize(this);
        }
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Measurement_Created();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Measurement_AllowSaveWithErrors(ref bool result);
    
        #endregion
    
        #region Private Properties
        
        /// <summary>
        /// Gets the Application object for this application.  The Application object provides access to active screens, methods to open screens and access to the current user.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::Microsoft.LightSwitch.IApplication<global::LightSwitchApplication.DataWorkspace> Application
        {
            get
            {
                return (global::Microsoft.LightSwitch.IApplication<global::LightSwitchApplication.DataWorkspace>)global::LightSwitchApplication.Application.Current;
            }
        }
        
        /// <summary>
        /// Gets the containing data workspace.  The data workspace provides access to all data sources in the application.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.DataWorkspace DataWorkspace
        {
            get
            {
                return (global::LightSwitchApplication.DataWorkspace)this.Details.EntitySet.Details.DataService.Details.DataWorkspace;
            }
        }
        
        #endregion
    
        #region Public Properties
    
        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Guid SignalID
        {
            get
            {
                return global::LightSwitchApplication.Measurement.DetailsClass.GetValue(this, global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.SignalID);
            }
            set
            {
                global::LightSwitchApplication.Measurement.DetailsClass.SetValue(this, global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.SignalID, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SignalID_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SignalID_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SignalID_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Nullable<int> HistorianID
        {
            get
            {
                return global::LightSwitchApplication.Measurement.DetailsClass.GetValue(this, global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.HistorianID);
            }
            set
            {
                global::LightSwitchApplication.Measurement.DetailsClass.SetValue(this, global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.HistorianID, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void HistorianID_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void HistorianID_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void HistorianID_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string PointTag
        {
            get
            {
                return global::LightSwitchApplication.Measurement.DetailsClass.GetValue(this, global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.PointTag);
            }
            set
            {
                global::LightSwitchApplication.Measurement.DetailsClass.SetValue(this, global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.PointTag, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PointTag_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PointTag_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PointTag_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string AlternateTag
        {
            get
            {
                return global::LightSwitchApplication.Measurement.DetailsClass.GetValue(this, global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.AlternateTag);
            }
            set
            {
                global::LightSwitchApplication.Measurement.DetailsClass.SetValue(this, global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.AlternateTag, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void AlternateTag_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void AlternateTag_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void AlternateTag_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string SignalReference
        {
            get
            {
                return global::LightSwitchApplication.Measurement.DetailsClass.GetValue(this, global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.SignalReference);
            }
            set
            {
                global::LightSwitchApplication.Measurement.DetailsClass.SetValue(this, global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.SignalReference, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SignalReference_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SignalReference_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SignalReference_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public double Adder
        {
            get
            {
                return global::LightSwitchApplication.Measurement.DetailsClass.GetValue(this, global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.Adder);
            }
            set
            {
                global::LightSwitchApplication.Measurement.DetailsClass.SetValue(this, global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.Adder, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Adder_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Adder_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Adder_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public double Multiplier
        {
            get
            {
                return global::LightSwitchApplication.Measurement.DetailsClass.GetValue(this, global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.Multiplier);
            }
            set
            {
                global::LightSwitchApplication.Measurement.DetailsClass.SetValue(this, global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.Multiplier, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Multiplier_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Multiplier_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Multiplier_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Description
        {
            get
            {
                return global::LightSwitchApplication.Measurement.DetailsClass.GetValue(this, global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.Description);
            }
            set
            {
                global::LightSwitchApplication.Measurement.DetailsClass.SetValue(this, global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.Description, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Description_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Description_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Description_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Internal
        {
            get
            {
                return global::LightSwitchApplication.Measurement.DetailsClass.GetValue(this, global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.Internal);
            }
            set
            {
                global::LightSwitchApplication.Measurement.DetailsClass.SetValue(this, global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.Internal, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Internal_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Internal_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Internal_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Subscribed
        {
            get
            {
                return global::LightSwitchApplication.Measurement.DetailsClass.GetValue(this, global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.Subscribed);
            }
            set
            {
                global::LightSwitchApplication.Measurement.DetailsClass.SetValue(this, global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.Subscribed, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Subscribed_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Subscribed_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Subscribed_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Enabled
        {
            get
            {
                return global::LightSwitchApplication.Measurement.DetailsClass.GetValue(this, global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.Enabled);
            }
            set
            {
                global::LightSwitchApplication.Measurement.DetailsClass.SetValue(this, global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.Enabled, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Enabled_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Enabled_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Enabled_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.DateTime CreatedOn
        {
            get
            {
                return global::LightSwitchApplication.Measurement.DetailsClass.GetValue(this, global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.CreatedOn);
            }
            set
            {
                global::LightSwitchApplication.Measurement.DetailsClass.SetValue(this, global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.CreatedOn, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CreatedOn_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CreatedOn_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CreatedOn_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string CreatedBy
        {
            get
            {
                return global::LightSwitchApplication.Measurement.DetailsClass.GetValue(this, global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.CreatedBy);
            }
            set
            {
                global::LightSwitchApplication.Measurement.DetailsClass.SetValue(this, global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.CreatedBy, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CreatedBy_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CreatedBy_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CreatedBy_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.DateTime UpdatedOn
        {
            get
            {
                return global::LightSwitchApplication.Measurement.DetailsClass.GetValue(this, global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.UpdatedOn);
            }
            set
            {
                global::LightSwitchApplication.Measurement.DetailsClass.SetValue(this, global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.UpdatedOn, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void UpdatedOn_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void UpdatedOn_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void UpdatedOn_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string UpdatedBy
        {
            get
            {
                return global::LightSwitchApplication.Measurement.DetailsClass.GetValue(this, global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.UpdatedBy);
            }
            set
            {
                global::LightSwitchApplication.Measurement.DetailsClass.SetValue(this, global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.UpdatedBy, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void UpdatedBy_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void UpdatedBy_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void UpdatedBy_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int PointID
        {
            get
            {
                return global::LightSwitchApplication.Measurement.DetailsClass.GetValue(this, global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.PointID);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PointID_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PointID_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PointID_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.EntityCollection<global::LightSwitchApplication.Alarm> Alarms
        {
            get
            {
                return global::LightSwitchApplication.Measurement.DetailsClass.GetValue(this, global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.Alarms);
            }
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.Alarm> AlarmsQuery
        {
            get
            {
                return global::LightSwitchApplication.Measurement.DetailsClass.GetQuery(this, global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.Alarms);
            }
        }

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.EntityCollection<global::LightSwitchApplication.AlarmLog> AlarmLogs
        {
            get
            {
                return global::LightSwitchApplication.Measurement.DetailsClass.GetValue(this, global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.AlarmLogs);
            }
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.AlarmLog> AlarmLogsQuery
        {
            get
            {
                return global::LightSwitchApplication.Measurement.DetailsClass.GetQuery(this, global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.AlarmLogs);
            }
        }

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::LightSwitchApplication.Device Device
        {
            get
            {
                return global::LightSwitchApplication.Measurement.DetailsClass.GetValue(this, global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.Device);
            }
            set
            {
                global::LightSwitchApplication.Measurement.DetailsClass.SetValue(this, global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.Device, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Device_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Device_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Device_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::LightSwitchApplication.SignalType SignalType
        {
            get
            {
                return global::LightSwitchApplication.Measurement.DetailsClass.GetValue(this, global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.SignalType);
            }
            set
            {
                global::LightSwitchApplication.Measurement.DetailsClass.SetValue(this, global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.SignalType, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SignalType_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SignalType_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SignalType_Changed();

        #endregion
    
        #region Details Class
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed class DetailsClass : global::Microsoft.LightSwitch.Details.Framework.Base.EntityDetails<
                global::LightSwitchApplication.Measurement,
                global::LightSwitchApplication.Measurement.DetailsClass,
                global::LightSwitchApplication.Measurement.DetailsClass.IImplementation,
                global::LightSwitchApplication.Measurement.DetailsClass.PropertySet,
                global::Microsoft.LightSwitch.Details.Framework.EntityCommandSet<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass>,
                global::Microsoft.LightSwitch.Details.Framework.EntityMethodSet<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass>>
        {
    
            static DetailsClass()
            {
                var initializeEntry = global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.SignalID;
            }
    
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Base.EntityDetails<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass>.Entry
                __MeasurementEntry = new global::Microsoft.LightSwitch.Details.Framework.Base.EntityDetails<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass>.Entry(
                    global::LightSwitchApplication.Measurement.DetailsClass.__Measurement_CreateNew,
                    global::LightSwitchApplication.Measurement.DetailsClass.__Measurement_Created,
                    global::LightSwitchApplication.Measurement.DetailsClass.__Measurement_AllowSaveWithErrors);
            private static global::LightSwitchApplication.Measurement __Measurement_CreateNew(global::Microsoft.LightSwitch.Framework.EntitySet<global::LightSwitchApplication.Measurement> es)
            {
                return new global::LightSwitchApplication.Measurement(es);
            }
            private static void __Measurement_Created(global::LightSwitchApplication.Measurement e)
            {
                e.Measurement_Created();
            }
            private static bool __Measurement_AllowSaveWithErrors(global::LightSwitchApplication.Measurement e)
            {
                bool result = false;
                e.Measurement_AllowSaveWithErrors(ref result);
                return result;
            }
    
            public DetailsClass() : base()
            {
            }
    
            public new global::Microsoft.LightSwitch.Details.Framework.EntityCommandSet<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass> Commands
            {
                get
                {
                    return base.Commands;
                }
            }
    
            public new global::Microsoft.LightSwitch.Details.Framework.EntityMethodSet<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass> Methods
            {
                get
                {
                    return base.Methods;
                }
            }
    
            public new global::LightSwitchApplication.Measurement.DetailsClass.PropertySet Properties
            {
                get
                {
                    return base.Properties;
                }
            }
    
            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class PropertySet : global::Microsoft.LightSwitch.Details.Framework.Base.EntityPropertySet<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass>
            {
    
                public PropertySet() : base()
                {
                }
    
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, global::System.Guid> SignalID
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.SignalID) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, global::System.Guid>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, global::System.Nullable<int>> HistorianID
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.HistorianID) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, global::System.Nullable<int>>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, string> PointTag
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.PointTag) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, string> AlternateTag
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.AlternateTag) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, string> SignalReference
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.SignalReference) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, double> Adder
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.Adder) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, double>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, double> Multiplier
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.Multiplier) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, double>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, string> Description
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.Description) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, bool> Internal
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.Internal) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, bool>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, bool> Subscribed
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.Subscribed) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, bool>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, bool> Enabled
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.Enabled) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, bool>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, global::System.DateTime> CreatedOn
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.CreatedOn) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, global::System.DateTime>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, string> CreatedBy
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.CreatedBy) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, global::System.DateTime> UpdatedOn
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.UpdatedOn) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, global::System.DateTime>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, string> UpdatedBy
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.UpdatedBy) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, int> PointID
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.PointID) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, int>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityCollectionProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, global::LightSwitchApplication.Alarm> Alarms
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.Alarms) as global::Microsoft.LightSwitch.Details.Framework.EntityCollectionProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, global::LightSwitchApplication.Alarm>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityCollectionProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, global::LightSwitchApplication.AlarmLog> AlarmLogs
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.AlarmLogs) as global::Microsoft.LightSwitch.Details.Framework.EntityCollectionProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, global::LightSwitchApplication.AlarmLog>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, global::LightSwitchApplication.Device> Device
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.Device) as global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, global::LightSwitchApplication.Device>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, global::LightSwitchApplication.SignalType> SignalType
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.SignalType) as global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, global::LightSwitchApplication.SignalType>;
                    }
                }
                
            }
    
            #pragma warning disable 109
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
            public interface IImplementation : global::Microsoft.LightSwitch.Internal.IEntityImplementation
            {
                new global::System.Guid SignalID { get; set; }
                new global::System.Nullable<int> HistorianID { get; set; }
                new string PointTag { get; set; }
                new string AlternateTag { get; set; }
                new string SignalReference { get; set; }
                new double Adder { get; set; }
                new double Multiplier { get; set; }
                new string Description { get; set; }
                new bool Internal { get; set; }
                new bool Subscribed { get; set; }
                new bool Enabled { get; set; }
                new global::System.DateTime CreatedOn { get; set; }
                new string CreatedBy { get; set; }
                new global::System.DateTime UpdatedOn { get; set; }
                new string UpdatedBy { get; set; }
                new int PointID { get; }
                new global::System.Collections.IEnumerable Alarms { get; }
                new global::System.Collections.IEnumerable AlarmLogs { get; }
                new global::Microsoft.LightSwitch.Internal.IEntityImplementation Device { get; set; }
                new global::Microsoft.LightSwitch.Internal.IEntityImplementation SignalType { get; set; }
            }
            #pragma warning restore 109
    
            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal class PropertySetProperties
            {
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, global::System.Guid>.Entry
                    SignalID = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, global::System.Guid>.Entry(
                        "SignalID",
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._SignalID_Stub,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._SignalID_ComputeIsReadOnly,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._SignalID_Validate,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._SignalID_GetImplementationValue,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._SignalID_SetImplementationValue,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._SignalID_OnValueChanged);
                private static void _SignalID_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Measurement.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, global::System.Guid>.Data> c, global::LightSwitchApplication.Measurement.DetailsClass d, object sf)
                {
                    c(d, ref d._SignalID, sf);
                }
                private static bool _SignalID_ComputeIsReadOnly(global::LightSwitchApplication.Measurement e)
                {
                    bool result = false;
                    e.SignalID_IsReadOnly(ref result);
                    return result;
                }
                private static void _SignalID_Validate(global::LightSwitchApplication.Measurement e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.SignalID_Validate(r);
                }
                private static global::System.Guid _SignalID_GetImplementationValue(global::LightSwitchApplication.Measurement.DetailsClass d)
                {
                    return d.ImplementationEntity.SignalID;
                }
                private static void _SignalID_SetImplementationValue(global::LightSwitchApplication.Measurement.DetailsClass d, global::System.Guid v)
                {
                    d.ImplementationEntity.SignalID = v;
                }
                private static void _SignalID_OnValueChanged(global::LightSwitchApplication.Measurement e)
                {
                    e.SignalID_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, global::System.Nullable<int>>.Entry
                    HistorianID = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, global::System.Nullable<int>>.Entry(
                        "HistorianID",
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._HistorianID_Stub,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._HistorianID_ComputeIsReadOnly,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._HistorianID_Validate,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._HistorianID_GetImplementationValue,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._HistorianID_SetImplementationValue,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._HistorianID_OnValueChanged);
                private static void _HistorianID_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Measurement.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, global::System.Nullable<int>>.Data> c, global::LightSwitchApplication.Measurement.DetailsClass d, object sf)
                {
                    c(d, ref d._HistorianID, sf);
                }
                private static bool _HistorianID_ComputeIsReadOnly(global::LightSwitchApplication.Measurement e)
                {
                    bool result = false;
                    e.HistorianID_IsReadOnly(ref result);
                    return result;
                }
                private static void _HistorianID_Validate(global::LightSwitchApplication.Measurement e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.HistorianID_Validate(r);
                }
                private static global::System.Nullable<int> _HistorianID_GetImplementationValue(global::LightSwitchApplication.Measurement.DetailsClass d)
                {
                    return d.ImplementationEntity.HistorianID;
                }
                private static void _HistorianID_SetImplementationValue(global::LightSwitchApplication.Measurement.DetailsClass d, global::System.Nullable<int> v)
                {
                    d.ImplementationEntity.HistorianID = v;
                }
                private static void _HistorianID_OnValueChanged(global::LightSwitchApplication.Measurement e)
                {
                    e.HistorianID_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, string>.Entry
                    PointTag = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, string>.Entry(
                        "PointTag",
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._PointTag_Stub,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._PointTag_ComputeIsReadOnly,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._PointTag_Validate,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._PointTag_GetImplementationValue,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._PointTag_SetImplementationValue,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._PointTag_OnValueChanged);
                private static void _PointTag_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Measurement.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, string>.Data> c, global::LightSwitchApplication.Measurement.DetailsClass d, object sf)
                {
                    c(d, ref d._PointTag, sf);
                }
                private static bool _PointTag_ComputeIsReadOnly(global::LightSwitchApplication.Measurement e)
                {
                    bool result = false;
                    e.PointTag_IsReadOnly(ref result);
                    return result;
                }
                private static void _PointTag_Validate(global::LightSwitchApplication.Measurement e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.PointTag_Validate(r);
                }
                private static string _PointTag_GetImplementationValue(global::LightSwitchApplication.Measurement.DetailsClass d)
                {
                    return d.ImplementationEntity.PointTag;
                }
                private static void _PointTag_SetImplementationValue(global::LightSwitchApplication.Measurement.DetailsClass d, string v)
                {
                    d.ImplementationEntity.PointTag = v;
                }
                private static void _PointTag_OnValueChanged(global::LightSwitchApplication.Measurement e)
                {
                    e.PointTag_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, string>.Entry
                    AlternateTag = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, string>.Entry(
                        "AlternateTag",
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._AlternateTag_Stub,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._AlternateTag_ComputeIsReadOnly,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._AlternateTag_Validate,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._AlternateTag_GetImplementationValue,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._AlternateTag_SetImplementationValue,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._AlternateTag_OnValueChanged);
                private static void _AlternateTag_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Measurement.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, string>.Data> c, global::LightSwitchApplication.Measurement.DetailsClass d, object sf)
                {
                    c(d, ref d._AlternateTag, sf);
                }
                private static bool _AlternateTag_ComputeIsReadOnly(global::LightSwitchApplication.Measurement e)
                {
                    bool result = false;
                    e.AlternateTag_IsReadOnly(ref result);
                    return result;
                }
                private static void _AlternateTag_Validate(global::LightSwitchApplication.Measurement e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.AlternateTag_Validate(r);
                }
                private static string _AlternateTag_GetImplementationValue(global::LightSwitchApplication.Measurement.DetailsClass d)
                {
                    return d.ImplementationEntity.AlternateTag;
                }
                private static void _AlternateTag_SetImplementationValue(global::LightSwitchApplication.Measurement.DetailsClass d, string v)
                {
                    d.ImplementationEntity.AlternateTag = v;
                }
                private static void _AlternateTag_OnValueChanged(global::LightSwitchApplication.Measurement e)
                {
                    e.AlternateTag_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, string>.Entry
                    SignalReference = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, string>.Entry(
                        "SignalReference",
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._SignalReference_Stub,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._SignalReference_ComputeIsReadOnly,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._SignalReference_Validate,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._SignalReference_GetImplementationValue,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._SignalReference_SetImplementationValue,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._SignalReference_OnValueChanged);
                private static void _SignalReference_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Measurement.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, string>.Data> c, global::LightSwitchApplication.Measurement.DetailsClass d, object sf)
                {
                    c(d, ref d._SignalReference, sf);
                }
                private static bool _SignalReference_ComputeIsReadOnly(global::LightSwitchApplication.Measurement e)
                {
                    bool result = false;
                    e.SignalReference_IsReadOnly(ref result);
                    return result;
                }
                private static void _SignalReference_Validate(global::LightSwitchApplication.Measurement e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.SignalReference_Validate(r);
                }
                private static string _SignalReference_GetImplementationValue(global::LightSwitchApplication.Measurement.DetailsClass d)
                {
                    return d.ImplementationEntity.SignalReference;
                }
                private static void _SignalReference_SetImplementationValue(global::LightSwitchApplication.Measurement.DetailsClass d, string v)
                {
                    d.ImplementationEntity.SignalReference = v;
                }
                private static void _SignalReference_OnValueChanged(global::LightSwitchApplication.Measurement e)
                {
                    e.SignalReference_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, double>.Entry
                    Adder = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, double>.Entry(
                        "Adder",
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._Adder_Stub,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._Adder_ComputeIsReadOnly,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._Adder_Validate,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._Adder_GetImplementationValue,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._Adder_SetImplementationValue,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._Adder_OnValueChanged);
                private static void _Adder_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Measurement.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, double>.Data> c, global::LightSwitchApplication.Measurement.DetailsClass d, object sf)
                {
                    c(d, ref d._Adder, sf);
                }
                private static bool _Adder_ComputeIsReadOnly(global::LightSwitchApplication.Measurement e)
                {
                    bool result = false;
                    e.Adder_IsReadOnly(ref result);
                    return result;
                }
                private static void _Adder_Validate(global::LightSwitchApplication.Measurement e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Adder_Validate(r);
                }
                private static double _Adder_GetImplementationValue(global::LightSwitchApplication.Measurement.DetailsClass d)
                {
                    return d.ImplementationEntity.Adder;
                }
                private static void _Adder_SetImplementationValue(global::LightSwitchApplication.Measurement.DetailsClass d, double v)
                {
                    d.ImplementationEntity.Adder = v;
                }
                private static void _Adder_OnValueChanged(global::LightSwitchApplication.Measurement e)
                {
                    e.Adder_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, double>.Entry
                    Multiplier = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, double>.Entry(
                        "Multiplier",
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._Multiplier_Stub,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._Multiplier_ComputeIsReadOnly,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._Multiplier_Validate,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._Multiplier_GetImplementationValue,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._Multiplier_SetImplementationValue,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._Multiplier_OnValueChanged);
                private static void _Multiplier_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Measurement.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, double>.Data> c, global::LightSwitchApplication.Measurement.DetailsClass d, object sf)
                {
                    c(d, ref d._Multiplier, sf);
                }
                private static bool _Multiplier_ComputeIsReadOnly(global::LightSwitchApplication.Measurement e)
                {
                    bool result = false;
                    e.Multiplier_IsReadOnly(ref result);
                    return result;
                }
                private static void _Multiplier_Validate(global::LightSwitchApplication.Measurement e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Multiplier_Validate(r);
                }
                private static double _Multiplier_GetImplementationValue(global::LightSwitchApplication.Measurement.DetailsClass d)
                {
                    return d.ImplementationEntity.Multiplier;
                }
                private static void _Multiplier_SetImplementationValue(global::LightSwitchApplication.Measurement.DetailsClass d, double v)
                {
                    d.ImplementationEntity.Multiplier = v;
                }
                private static void _Multiplier_OnValueChanged(global::LightSwitchApplication.Measurement e)
                {
                    e.Multiplier_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, string>.Entry
                    Description = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, string>.Entry(
                        "Description",
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._Description_Stub,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._Description_ComputeIsReadOnly,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._Description_Validate,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._Description_GetImplementationValue,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._Description_SetImplementationValue,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._Description_OnValueChanged);
                private static void _Description_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Measurement.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, string>.Data> c, global::LightSwitchApplication.Measurement.DetailsClass d, object sf)
                {
                    c(d, ref d._Description, sf);
                }
                private static bool _Description_ComputeIsReadOnly(global::LightSwitchApplication.Measurement e)
                {
                    bool result = false;
                    e.Description_IsReadOnly(ref result);
                    return result;
                }
                private static void _Description_Validate(global::LightSwitchApplication.Measurement e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Description_Validate(r);
                }
                private static string _Description_GetImplementationValue(global::LightSwitchApplication.Measurement.DetailsClass d)
                {
                    return d.ImplementationEntity.Description;
                }
                private static void _Description_SetImplementationValue(global::LightSwitchApplication.Measurement.DetailsClass d, string v)
                {
                    d.ImplementationEntity.Description = v;
                }
                private static void _Description_OnValueChanged(global::LightSwitchApplication.Measurement e)
                {
                    e.Description_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, bool>.Entry
                    Internal = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, bool>.Entry(
                        "Internal",
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._Internal_Stub,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._Internal_ComputeIsReadOnly,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._Internal_Validate,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._Internal_GetImplementationValue,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._Internal_SetImplementationValue,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._Internal_OnValueChanged);
                private static void _Internal_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Measurement.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, bool>.Data> c, global::LightSwitchApplication.Measurement.DetailsClass d, object sf)
                {
                    c(d, ref d._Internal, sf);
                }
                private static bool _Internal_ComputeIsReadOnly(global::LightSwitchApplication.Measurement e)
                {
                    bool result = false;
                    e.Internal_IsReadOnly(ref result);
                    return result;
                }
                private static void _Internal_Validate(global::LightSwitchApplication.Measurement e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Internal_Validate(r);
                }
                private static bool _Internal_GetImplementationValue(global::LightSwitchApplication.Measurement.DetailsClass d)
                {
                    return d.ImplementationEntity.Internal;
                }
                private static void _Internal_SetImplementationValue(global::LightSwitchApplication.Measurement.DetailsClass d, bool v)
                {
                    d.ImplementationEntity.Internal = v;
                }
                private static void _Internal_OnValueChanged(global::LightSwitchApplication.Measurement e)
                {
                    e.Internal_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, bool>.Entry
                    Subscribed = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, bool>.Entry(
                        "Subscribed",
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._Subscribed_Stub,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._Subscribed_ComputeIsReadOnly,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._Subscribed_Validate,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._Subscribed_GetImplementationValue,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._Subscribed_SetImplementationValue,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._Subscribed_OnValueChanged);
                private static void _Subscribed_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Measurement.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, bool>.Data> c, global::LightSwitchApplication.Measurement.DetailsClass d, object sf)
                {
                    c(d, ref d._Subscribed, sf);
                }
                private static bool _Subscribed_ComputeIsReadOnly(global::LightSwitchApplication.Measurement e)
                {
                    bool result = false;
                    e.Subscribed_IsReadOnly(ref result);
                    return result;
                }
                private static void _Subscribed_Validate(global::LightSwitchApplication.Measurement e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Subscribed_Validate(r);
                }
                private static bool _Subscribed_GetImplementationValue(global::LightSwitchApplication.Measurement.DetailsClass d)
                {
                    return d.ImplementationEntity.Subscribed;
                }
                private static void _Subscribed_SetImplementationValue(global::LightSwitchApplication.Measurement.DetailsClass d, bool v)
                {
                    d.ImplementationEntity.Subscribed = v;
                }
                private static void _Subscribed_OnValueChanged(global::LightSwitchApplication.Measurement e)
                {
                    e.Subscribed_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, bool>.Entry
                    Enabled = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, bool>.Entry(
                        "Enabled",
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._Enabled_Stub,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._Enabled_ComputeIsReadOnly,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._Enabled_Validate,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._Enabled_GetImplementationValue,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._Enabled_SetImplementationValue,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._Enabled_OnValueChanged);
                private static void _Enabled_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Measurement.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, bool>.Data> c, global::LightSwitchApplication.Measurement.DetailsClass d, object sf)
                {
                    c(d, ref d._Enabled, sf);
                }
                private static bool _Enabled_ComputeIsReadOnly(global::LightSwitchApplication.Measurement e)
                {
                    bool result = false;
                    e.Enabled_IsReadOnly(ref result);
                    return result;
                }
                private static void _Enabled_Validate(global::LightSwitchApplication.Measurement e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Enabled_Validate(r);
                }
                private static bool _Enabled_GetImplementationValue(global::LightSwitchApplication.Measurement.DetailsClass d)
                {
                    return d.ImplementationEntity.Enabled;
                }
                private static void _Enabled_SetImplementationValue(global::LightSwitchApplication.Measurement.DetailsClass d, bool v)
                {
                    d.ImplementationEntity.Enabled = v;
                }
                private static void _Enabled_OnValueChanged(global::LightSwitchApplication.Measurement e)
                {
                    e.Enabled_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, global::System.DateTime>.Entry
                    CreatedOn = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, global::System.DateTime>.Entry(
                        "CreatedOn",
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._CreatedOn_Stub,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._CreatedOn_ComputeIsReadOnly,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._CreatedOn_Validate,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._CreatedOn_GetImplementationValue,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._CreatedOn_SetImplementationValue,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._CreatedOn_OnValueChanged);
                private static void _CreatedOn_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Measurement.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, global::System.DateTime>.Data> c, global::LightSwitchApplication.Measurement.DetailsClass d, object sf)
                {
                    c(d, ref d._CreatedOn, sf);
                }
                private static bool _CreatedOn_ComputeIsReadOnly(global::LightSwitchApplication.Measurement e)
                {
                    bool result = false;
                    e.CreatedOn_IsReadOnly(ref result);
                    return result;
                }
                private static void _CreatedOn_Validate(global::LightSwitchApplication.Measurement e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.CreatedOn_Validate(r);
                }
                private static global::System.DateTime _CreatedOn_GetImplementationValue(global::LightSwitchApplication.Measurement.DetailsClass d)
                {
                    return d.ImplementationEntity.CreatedOn;
                }
                private static void _CreatedOn_SetImplementationValue(global::LightSwitchApplication.Measurement.DetailsClass d, global::System.DateTime v)
                {
                    d.ImplementationEntity.CreatedOn = global::LightSwitchApplication.Measurement.DetailsClass.ClearDateTimeKind(v);
                }
                private static void _CreatedOn_OnValueChanged(global::LightSwitchApplication.Measurement e)
                {
                    e.CreatedOn_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, string>.Entry
                    CreatedBy = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, string>.Entry(
                        "CreatedBy",
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._CreatedBy_Stub,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._CreatedBy_ComputeIsReadOnly,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._CreatedBy_Validate,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._CreatedBy_GetImplementationValue,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._CreatedBy_SetImplementationValue,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._CreatedBy_OnValueChanged);
                private static void _CreatedBy_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Measurement.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, string>.Data> c, global::LightSwitchApplication.Measurement.DetailsClass d, object sf)
                {
                    c(d, ref d._CreatedBy, sf);
                }
                private static bool _CreatedBy_ComputeIsReadOnly(global::LightSwitchApplication.Measurement e)
                {
                    bool result = false;
                    e.CreatedBy_IsReadOnly(ref result);
                    return result;
                }
                private static void _CreatedBy_Validate(global::LightSwitchApplication.Measurement e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.CreatedBy_Validate(r);
                }
                private static string _CreatedBy_GetImplementationValue(global::LightSwitchApplication.Measurement.DetailsClass d)
                {
                    return d.ImplementationEntity.CreatedBy;
                }
                private static void _CreatedBy_SetImplementationValue(global::LightSwitchApplication.Measurement.DetailsClass d, string v)
                {
                    d.ImplementationEntity.CreatedBy = v;
                }
                private static void _CreatedBy_OnValueChanged(global::LightSwitchApplication.Measurement e)
                {
                    e.CreatedBy_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, global::System.DateTime>.Entry
                    UpdatedOn = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, global::System.DateTime>.Entry(
                        "UpdatedOn",
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._UpdatedOn_Stub,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._UpdatedOn_ComputeIsReadOnly,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._UpdatedOn_Validate,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._UpdatedOn_GetImplementationValue,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._UpdatedOn_SetImplementationValue,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._UpdatedOn_OnValueChanged);
                private static void _UpdatedOn_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Measurement.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, global::System.DateTime>.Data> c, global::LightSwitchApplication.Measurement.DetailsClass d, object sf)
                {
                    c(d, ref d._UpdatedOn, sf);
                }
                private static bool _UpdatedOn_ComputeIsReadOnly(global::LightSwitchApplication.Measurement e)
                {
                    bool result = false;
                    e.UpdatedOn_IsReadOnly(ref result);
                    return result;
                }
                private static void _UpdatedOn_Validate(global::LightSwitchApplication.Measurement e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.UpdatedOn_Validate(r);
                }
                private static global::System.DateTime _UpdatedOn_GetImplementationValue(global::LightSwitchApplication.Measurement.DetailsClass d)
                {
                    return d.ImplementationEntity.UpdatedOn;
                }
                private static void _UpdatedOn_SetImplementationValue(global::LightSwitchApplication.Measurement.DetailsClass d, global::System.DateTime v)
                {
                    d.ImplementationEntity.UpdatedOn = global::LightSwitchApplication.Measurement.DetailsClass.ClearDateTimeKind(v);
                }
                private static void _UpdatedOn_OnValueChanged(global::LightSwitchApplication.Measurement e)
                {
                    e.UpdatedOn_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, string>.Entry
                    UpdatedBy = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, string>.Entry(
                        "UpdatedBy",
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._UpdatedBy_Stub,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._UpdatedBy_ComputeIsReadOnly,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._UpdatedBy_Validate,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._UpdatedBy_GetImplementationValue,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._UpdatedBy_SetImplementationValue,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._UpdatedBy_OnValueChanged);
                private static void _UpdatedBy_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Measurement.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, string>.Data> c, global::LightSwitchApplication.Measurement.DetailsClass d, object sf)
                {
                    c(d, ref d._UpdatedBy, sf);
                }
                private static bool _UpdatedBy_ComputeIsReadOnly(global::LightSwitchApplication.Measurement e)
                {
                    bool result = false;
                    e.UpdatedBy_IsReadOnly(ref result);
                    return result;
                }
                private static void _UpdatedBy_Validate(global::LightSwitchApplication.Measurement e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.UpdatedBy_Validate(r);
                }
                private static string _UpdatedBy_GetImplementationValue(global::LightSwitchApplication.Measurement.DetailsClass d)
                {
                    return d.ImplementationEntity.UpdatedBy;
                }
                private static void _UpdatedBy_SetImplementationValue(global::LightSwitchApplication.Measurement.DetailsClass d, string v)
                {
                    d.ImplementationEntity.UpdatedBy = v;
                }
                private static void _UpdatedBy_OnValueChanged(global::LightSwitchApplication.Measurement e)
                {
                    e.UpdatedBy_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, int>.Entry
                    PointID = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, int>.Entry(
                        "PointID",
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._PointID_Stub,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._PointID_ComputeIsReadOnly,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._PointID_Validate,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._PointID_GetImplementationValue,
                        null,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._PointID_OnValueChanged);
                private static void _PointID_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Measurement.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, int>.Data> c, global::LightSwitchApplication.Measurement.DetailsClass d, object sf)
                {
                    c(d, ref d._PointID, sf);
                }
                private static bool _PointID_ComputeIsReadOnly(global::LightSwitchApplication.Measurement e)
                {
                    bool result = false;
                    e.PointID_IsReadOnly(ref result);
                    return result;
                }
                private static void _PointID_Validate(global::LightSwitchApplication.Measurement e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.PointID_Validate(r);
                }
                private static int _PointID_GetImplementationValue(global::LightSwitchApplication.Measurement.DetailsClass d)
                {
                    return d.ImplementationEntity.PointID;
                }
                private static void _PointID_OnValueChanged(global::LightSwitchApplication.Measurement e)
                {
                    e.PointID_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityCollectionProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, global::LightSwitchApplication.Alarm>.Entry
                    Alarms = new global::Microsoft.LightSwitch.Details.Framework.EntityCollectionProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, global::LightSwitchApplication.Alarm>.Entry(
                        "Alarms",
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._Alarms_Stub,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._Alarms_GetReferencedEntities,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._Alarms_GetEntityCollection);
                private static void _Alarms_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Measurement.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityCollectionProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, global::LightSwitchApplication.Alarm>.Data> c, global::LightSwitchApplication.Measurement.DetailsClass d, object sf)
                {
                    c(d, ref d._Alarms, sf);
                }
                private static global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Alarm> _Alarms_GetReferencedEntities(global::LightSwitchApplication.Measurement.DetailsClass d)
                {
                    return d.GetReferencedEntities<global::LightSwitchApplication.Alarm, global::LightSwitchApplication.Alarm.DetailsClass>(global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.Alarms, ref d._Alarms);
                }
                private static global::System.Collections.IEnumerable _Alarms_GetEntityCollection(global::LightSwitchApplication.Measurement.DetailsClass d)
                {
                    return d.ImplementationEntity.Alarms;
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityCollectionProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, global::LightSwitchApplication.AlarmLog>.Entry
                    AlarmLogs = new global::Microsoft.LightSwitch.Details.Framework.EntityCollectionProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, global::LightSwitchApplication.AlarmLog>.Entry(
                        "AlarmLogs",
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._AlarmLogs_Stub,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._AlarmLogs_GetReferencedEntities,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._AlarmLogs_GetEntityCollection);
                private static void _AlarmLogs_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Measurement.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityCollectionProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, global::LightSwitchApplication.AlarmLog>.Data> c, global::LightSwitchApplication.Measurement.DetailsClass d, object sf)
                {
                    c(d, ref d._AlarmLogs, sf);
                }
                private static global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.AlarmLog> _AlarmLogs_GetReferencedEntities(global::LightSwitchApplication.Measurement.DetailsClass d)
                {
                    return d.GetReferencedEntities<global::LightSwitchApplication.AlarmLog, global::LightSwitchApplication.AlarmLog.DetailsClass>(global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.AlarmLogs, ref d._AlarmLogs);
                }
                private static global::System.Collections.IEnumerable _AlarmLogs_GetEntityCollection(global::LightSwitchApplication.Measurement.DetailsClass d)
                {
                    return d.ImplementationEntity.AlarmLogs;
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, global::LightSwitchApplication.Device>.Entry
                    Device = new global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, global::LightSwitchApplication.Device>.Entry(
                        "Device",
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._Device_Stub,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._Device_ComputeIsReadOnly,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._Device_Validate,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._Device_GetCoreImplementationValue,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._Device_GetImplementationValue,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._Device_SetImplementationValue,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._Device_Refresh,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._Device_OnValueChanged);
                private static void _Device_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Measurement.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, global::LightSwitchApplication.Device>.Data> c, global::LightSwitchApplication.Measurement.DetailsClass d, object sf)
                {
                    c(d, ref d._Device, sf);
                }
                private static bool _Device_ComputeIsReadOnly(global::LightSwitchApplication.Measurement e)
                {
                    bool result = false;
                    e.Device_IsReadOnly(ref result);
                    return result;
                }
                private static void _Device_Validate(global::LightSwitchApplication.Measurement e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Device_Validate(r);
                }
                private static global::Microsoft.LightSwitch.Internal.IEntityImplementation _Device_GetCoreImplementationValue(global::LightSwitchApplication.Measurement.DetailsClass d)
                {
                    return d.ImplementationEntity.Device;
                }
                private static global::LightSwitchApplication.Device _Device_GetImplementationValue(global::LightSwitchApplication.Measurement.DetailsClass d)
                {
                    return d.GetImplementationValue<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass>(global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.Device, ref d._Device);
                }
                private static void _Device_SetImplementationValue(global::LightSwitchApplication.Measurement.DetailsClass d, global::LightSwitchApplication.Device v)
                {
                    d.SetImplementationValue(global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.Device, ref d._Device, (i, ev) => i.Device = ev, v);
                }
                private static void _Device_Refresh(global::LightSwitchApplication.Measurement.DetailsClass d)
                {
                    d.RefreshNavigationProperty(global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.Device, ref d._Device);
                }
                private static void _Device_OnValueChanged(global::LightSwitchApplication.Measurement e)
                {
                    e.Device_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, global::LightSwitchApplication.SignalType>.Entry
                    SignalType = new global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, global::LightSwitchApplication.SignalType>.Entry(
                        "SignalType",
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._SignalType_Stub,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._SignalType_ComputeIsReadOnly,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._SignalType_Validate,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._SignalType_GetCoreImplementationValue,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._SignalType_GetImplementationValue,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._SignalType_SetImplementationValue,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._SignalType_Refresh,
                        global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties._SignalType_OnValueChanged);
                private static void _SignalType_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Measurement.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, global::LightSwitchApplication.SignalType>.Data> c, global::LightSwitchApplication.Measurement.DetailsClass d, object sf)
                {
                    c(d, ref d._SignalType, sf);
                }
                private static bool _SignalType_ComputeIsReadOnly(global::LightSwitchApplication.Measurement e)
                {
                    bool result = false;
                    e.SignalType_IsReadOnly(ref result);
                    return result;
                }
                private static void _SignalType_Validate(global::LightSwitchApplication.Measurement e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.SignalType_Validate(r);
                }
                private static global::Microsoft.LightSwitch.Internal.IEntityImplementation _SignalType_GetCoreImplementationValue(global::LightSwitchApplication.Measurement.DetailsClass d)
                {
                    return d.ImplementationEntity.SignalType;
                }
                private static global::LightSwitchApplication.SignalType _SignalType_GetImplementationValue(global::LightSwitchApplication.Measurement.DetailsClass d)
                {
                    return d.GetImplementationValue<global::LightSwitchApplication.SignalType, global::LightSwitchApplication.SignalType.DetailsClass>(global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.SignalType, ref d._SignalType);
                }
                private static void _SignalType_SetImplementationValue(global::LightSwitchApplication.Measurement.DetailsClass d, global::LightSwitchApplication.SignalType v)
                {
                    d.SetImplementationValue(global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.SignalType, ref d._SignalType, (i, ev) => i.SignalType = ev, v);
                }
                private static void _SignalType_Refresh(global::LightSwitchApplication.Measurement.DetailsClass d)
                {
                    d.RefreshNavigationProperty(global::LightSwitchApplication.Measurement.DetailsClass.PropertySetProperties.SignalType, ref d._SignalType);
                }
                private static void _SignalType_OnValueChanged(global::LightSwitchApplication.Measurement e)
                {
                    e.SignalType_Changed();
                }
    
            }
    
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, global::System.Guid>.Data _SignalID;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, global::System.Nullable<int>>.Data _HistorianID;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, string>.Data _PointTag;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, string>.Data _AlternateTag;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, string>.Data _SignalReference;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, double>.Data _Adder;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, double>.Data _Multiplier;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, string>.Data _Description;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, bool>.Data _Internal;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, bool>.Data _Subscribed;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, bool>.Data _Enabled;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, global::System.DateTime>.Data _CreatedOn;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, string>.Data _CreatedBy;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, global::System.DateTime>.Data _UpdatedOn;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, string>.Data _UpdatedBy;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, int>.Data _PointID;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityCollectionProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, global::LightSwitchApplication.Alarm>.Data _Alarms;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityCollectionProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, global::LightSwitchApplication.AlarmLog>.Data _AlarmLogs;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, global::LightSwitchApplication.Device>.Data _Device;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass, global::LightSwitchApplication.SignalType>.Data _SignalType;
            
        }
    
        #endregion
    }
    
    #endregion
}
