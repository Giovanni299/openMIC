

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LightSwitchApplication
{
    #region Entities
    
    /// <summary>
    /// Source Devices
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
    public sealed partial class Device : global::Microsoft.LightSwitch.Framework.Base.EntityObject<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass>
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new instance of the Device entity.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Device()
            : this(null)
        {
        }
    
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Device(global::Microsoft.LightSwitch.Framework.EntitySet<global::LightSwitchApplication.Device> entitySet)
            : base(entitySet)
        {
            global::LightSwitchApplication.Device.DetailsClass.Initialize(this);
        }
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Device_Created();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Device_AllowSaveWithErrors(ref bool result);
    
        #endregion
    
        #region Private Properties
        
        /// <summary>
        /// Gets the Application object for this application.  The Application object provides access to active screens, methods to open screens and access to the current user.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::Microsoft.LightSwitch.IApplication<global::LightSwitchApplication.DataWorkspace> Application
        {
            get
            {
                return (global::Microsoft.LightSwitch.IApplication<global::LightSwitchApplication.DataWorkspace>)global::LightSwitchApplication.Application.Current;
            }
        }
        
        /// <summary>
        /// Gets the containing data workspace.  The data workspace provides access to all data sources in the application.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.DataWorkspace DataWorkspace
        {
            get
            {
                return (global::LightSwitchApplication.DataWorkspace)this.Details.EntitySet.Details.DataService.Details.DataWorkspace;
            }
        }
        
        #endregion
    
        #region Public Properties
    
        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int ID
        {
            get
            {
                return global::LightSwitchApplication.Device.DetailsClass.GetValue(this, global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.ID);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ID_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ID_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ID_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Guid UniqueID
        {
            get
            {
                return global::LightSwitchApplication.Device.DetailsClass.GetValue(this, global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.UniqueID);
            }
            set
            {
                global::LightSwitchApplication.Device.DetailsClass.SetValue(this, global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.UniqueID, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void UniqueID_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void UniqueID_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void UniqueID_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Acronym
        {
            get
            {
                return global::LightSwitchApplication.Device.DetailsClass.GetValue(this, global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.Acronym);
            }
            set
            {
                global::LightSwitchApplication.Device.DetailsClass.SetValue(this, global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.Acronym, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Acronym_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Acronym_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Acronym_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Name
        {
            get
            {
                return global::LightSwitchApplication.Device.DetailsClass.GetValue(this, global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.Name);
            }
            set
            {
                global::LightSwitchApplication.Device.DetailsClass.SetValue(this, global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.Name, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Name_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Name_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Name_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Nullable<int> HistorianID
        {
            get
            {
                return global::LightSwitchApplication.Device.DetailsClass.GetValue(this, global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.HistorianID);
            }
            set
            {
                global::LightSwitchApplication.Device.DetailsClass.SetValue(this, global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.HistorianID, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void HistorianID_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void HistorianID_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void HistorianID_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int AccessID
        {
            get
            {
                return global::LightSwitchApplication.Device.DetailsClass.GetValue(this, global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.AccessID);
            }
            set
            {
                global::LightSwitchApplication.Device.DetailsClass.SetValue(this, global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.AccessID, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void AccessID_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void AccessID_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void AccessID_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Nullable<decimal> Longitude
        {
            get
            {
                return global::LightSwitchApplication.Device.DetailsClass.GetValue(this, global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.Longitude);
            }
            set
            {
                global::LightSwitchApplication.Device.DetailsClass.SetValue(this, global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.Longitude, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Longitude_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Longitude_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Longitude_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Nullable<decimal> Latitude
        {
            get
            {
                return global::LightSwitchApplication.Device.DetailsClass.GetValue(this, global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.Latitude);
            }
            set
            {
                global::LightSwitchApplication.Device.DetailsClass.SetValue(this, global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.Latitude, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Latitude_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Latitude_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Latitude_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string ConnectionString
        {
            get
            {
                return global::LightSwitchApplication.Device.DetailsClass.GetValue(this, global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.ConnectionString);
            }
            set
            {
                global::LightSwitchApplication.Device.DetailsClass.SetValue(this, global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.ConnectionString, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ConnectionString_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ConnectionString_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ConnectionString_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string TimeZone
        {
            get
            {
                return global::LightSwitchApplication.Device.DetailsClass.GetValue(this, global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.TimeZone);
            }
            set
            {
                global::LightSwitchApplication.Device.DetailsClass.SetValue(this, global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.TimeZone, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TimeZone_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TimeZone_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TimeZone_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public long TimeAdjustmentTicks
        {
            get
            {
                return global::LightSwitchApplication.Device.DetailsClass.GetValue(this, global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.TimeAdjustmentTicks);
            }
            set
            {
                global::LightSwitchApplication.Device.DetailsClass.SetValue(this, global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.TimeAdjustmentTicks, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TimeAdjustmentTicks_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TimeAdjustmentTicks_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TimeAdjustmentTicks_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Nullable<int> TypicalDataFrequency
        {
            get
            {
                return global::LightSwitchApplication.Device.DetailsClass.GetValue(this, global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.TypicalDataFrequency);
            }
            set
            {
                global::LightSwitchApplication.Device.DetailsClass.SetValue(this, global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.TypicalDataFrequency, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TypicalDataFrequency_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TypicalDataFrequency_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TypicalDataFrequency_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string DataFrequencyUnits
        {
            get
            {
                return global::LightSwitchApplication.Device.DetailsClass.GetValue(this, global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.DataFrequencyUnits);
            }
            set
            {
                global::LightSwitchApplication.Device.DetailsClass.SetValue(this, global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.DataFrequencyUnits, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void DataFrequencyUnits_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void DataFrequencyUnits_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void DataFrequencyUnits_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int MeasurementReportingInterval
        {
            get
            {
                return global::LightSwitchApplication.Device.DetailsClass.GetValue(this, global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.MeasurementReportingInterval);
            }
            set
            {
                global::LightSwitchApplication.Device.DetailsClass.SetValue(this, global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.MeasurementReportingInterval, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MeasurementReportingInterval_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MeasurementReportingInterval_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MeasurementReportingInterval_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string ContactList
        {
            get
            {
                return global::LightSwitchApplication.Device.DetailsClass.GetValue(this, global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.ContactList);
            }
            set
            {
                global::LightSwitchApplication.Device.DetailsClass.SetValue(this, global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.ContactList, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ContactList_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ContactList_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ContactList_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Nullable<int> MeasuredLines
        {
            get
            {
                return global::LightSwitchApplication.Device.DetailsClass.GetValue(this, global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.MeasuredLines);
            }
            set
            {
                global::LightSwitchApplication.Device.DetailsClass.SetValue(this, global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.MeasuredLines, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MeasuredLines_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MeasuredLines_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MeasuredLines_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int LoadOrder
        {
            get
            {
                return global::LightSwitchApplication.Device.DetailsClass.GetValue(this, global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.LoadOrder);
            }
            set
            {
                global::LightSwitchApplication.Device.DetailsClass.SetValue(this, global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.LoadOrder, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void LoadOrder_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void LoadOrder_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void LoadOrder_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Enabled
        {
            get
            {
                return global::LightSwitchApplication.Device.DetailsClass.GetValue(this, global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.Enabled);
            }
            set
            {
                global::LightSwitchApplication.Device.DetailsClass.SetValue(this, global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.Enabled, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Enabled_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Enabled_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Enabled_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.DateTime CreatedOn
        {
            get
            {
                return global::LightSwitchApplication.Device.DetailsClass.GetValue(this, global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.CreatedOn);
            }
            set
            {
                global::LightSwitchApplication.Device.DetailsClass.SetValue(this, global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.CreatedOn, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CreatedOn_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CreatedOn_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CreatedOn_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string CreatedBy
        {
            get
            {
                return global::LightSwitchApplication.Device.DetailsClass.GetValue(this, global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.CreatedBy);
            }
            set
            {
                global::LightSwitchApplication.Device.DetailsClass.SetValue(this, global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.CreatedBy, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CreatedBy_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CreatedBy_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CreatedBy_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.DateTime UpdatedOn
        {
            get
            {
                return global::LightSwitchApplication.Device.DetailsClass.GetValue(this, global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.UpdatedOn);
            }
            set
            {
                global::LightSwitchApplication.Device.DetailsClass.SetValue(this, global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.UpdatedOn, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void UpdatedOn_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void UpdatedOn_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void UpdatedOn_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string UpdatedBy
        {
            get
            {
                return global::LightSwitchApplication.Device.DetailsClass.GetValue(this, global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.UpdatedBy);
            }
            set
            {
                global::LightSwitchApplication.Device.DetailsClass.SetValue(this, global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.UpdatedBy, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void UpdatedBy_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void UpdatedBy_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void UpdatedBy_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::LightSwitchApplication.Interconnection Interconnection
        {
            get
            {
                return global::LightSwitchApplication.Device.DetailsClass.GetValue(this, global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.Interconnection);
            }
            set
            {
                global::LightSwitchApplication.Device.DetailsClass.SetValue(this, global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.Interconnection, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Interconnection_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Interconnection_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Interconnection_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::LightSwitchApplication.Node Node
        {
            get
            {
                return global::LightSwitchApplication.Device.DetailsClass.GetValue(this, global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.Node);
            }
            set
            {
                global::LightSwitchApplication.Device.DetailsClass.SetValue(this, global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.Node, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Node_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Node_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Node_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::LightSwitchApplication.Protocol Protocol
        {
            get
            {
                return global::LightSwitchApplication.Device.DetailsClass.GetValue(this, global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.Protocol);
            }
            set
            {
                global::LightSwitchApplication.Device.DetailsClass.SetValue(this, global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.Protocol, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Protocol_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Protocol_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Protocol_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::LightSwitchApplication.VendorDevice VendorDevice
        {
            get
            {
                return global::LightSwitchApplication.Device.DetailsClass.GetValue(this, global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.VendorDevice);
            }
            set
            {
                global::LightSwitchApplication.Device.DetailsClass.SetValue(this, global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.VendorDevice, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void VendorDevice_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void VendorDevice_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void VendorDevice_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.EntityCollection<global::LightSwitchApplication.Measurement> Measurements
        {
            get
            {
                return global::LightSwitchApplication.Device.DetailsClass.GetValue(this, global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.Measurements);
            }
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.Measurement> MeasurementsQuery
        {
            get
            {
                return global::LightSwitchApplication.Device.DetailsClass.GetQuery(this, global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.Measurements);
            }
        }

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::LightSwitchApplication.Historian Historian
        {
            get
            {
                return global::LightSwitchApplication.Device.DetailsClass.GetValue(this, global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.Historian);
            }
            set
            {
                global::LightSwitchApplication.Device.DetailsClass.SetValue(this, global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.Historian, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Historian_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Historian_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Historian_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::LightSwitchApplication.Company Company
        {
            get
            {
                return global::LightSwitchApplication.Device.DetailsClass.GetValue(this, global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.Company);
            }
            set
            {
                global::LightSwitchApplication.Device.DetailsClass.SetValue(this, global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.Company, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Company_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Company_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Company_Changed();

        #endregion
    
        #region Details Class
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed class DetailsClass : global::Microsoft.LightSwitch.Details.Framework.Base.EntityDetails<
                global::LightSwitchApplication.Device,
                global::LightSwitchApplication.Device.DetailsClass,
                global::LightSwitchApplication.Device.DetailsClass.IImplementation,
                global::LightSwitchApplication.Device.DetailsClass.PropertySet,
                global::Microsoft.LightSwitch.Details.Framework.EntityCommandSet<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass>,
                global::Microsoft.LightSwitch.Details.Framework.EntityMethodSet<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass>>
        {
    
            static DetailsClass()
            {
                var initializeEntry = global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.ID;
            }
    
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Base.EntityDetails<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass>.Entry
                __DeviceEntry = new global::Microsoft.LightSwitch.Details.Framework.Base.EntityDetails<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass>.Entry(
                    global::LightSwitchApplication.Device.DetailsClass.__Device_CreateNew,
                    global::LightSwitchApplication.Device.DetailsClass.__Device_Created,
                    global::LightSwitchApplication.Device.DetailsClass.__Device_AllowSaveWithErrors);
            private static global::LightSwitchApplication.Device __Device_CreateNew(global::Microsoft.LightSwitch.Framework.EntitySet<global::LightSwitchApplication.Device> es)
            {
                return new global::LightSwitchApplication.Device(es);
            }
            private static void __Device_Created(global::LightSwitchApplication.Device e)
            {
                e.Device_Created();
            }
            private static bool __Device_AllowSaveWithErrors(global::LightSwitchApplication.Device e)
            {
                bool result = false;
                e.Device_AllowSaveWithErrors(ref result);
                return result;
            }
    
            public DetailsClass() : base()
            {
            }
    
            public new global::Microsoft.LightSwitch.Details.Framework.EntityCommandSet<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass> Commands
            {
                get
                {
                    return base.Commands;
                }
            }
    
            public new global::Microsoft.LightSwitch.Details.Framework.EntityMethodSet<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass> Methods
            {
                get
                {
                    return base.Methods;
                }
            }
    
            public new global::LightSwitchApplication.Device.DetailsClass.PropertySet Properties
            {
                get
                {
                    return base.Properties;
                }
            }
    
            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class PropertySet : global::Microsoft.LightSwitch.Details.Framework.Base.EntityPropertySet<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass>
            {
    
                public PropertySet() : base()
                {
                }
    
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, int> ID
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.ID) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, int>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::System.Guid> UniqueID
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.UniqueID) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::System.Guid>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, string> Acronym
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.Acronym) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, string> Name
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.Name) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::System.Nullable<int>> HistorianID
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.HistorianID) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::System.Nullable<int>>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, int> AccessID
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.AccessID) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, int>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::System.Nullable<decimal>> Longitude
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.Longitude) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::System.Nullable<decimal>>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::System.Nullable<decimal>> Latitude
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.Latitude) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::System.Nullable<decimal>>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, string> ConnectionString
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.ConnectionString) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, string> TimeZone
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.TimeZone) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, long> TimeAdjustmentTicks
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.TimeAdjustmentTicks) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, long>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::System.Nullable<int>> TypicalDataFrequency
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.TypicalDataFrequency) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::System.Nullable<int>>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, string> DataFrequencyUnits
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.DataFrequencyUnits) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, int> MeasurementReportingInterval
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.MeasurementReportingInterval) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, int>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, string> ContactList
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.ContactList) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::System.Nullable<int>> MeasuredLines
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.MeasuredLines) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::System.Nullable<int>>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, int> LoadOrder
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.LoadOrder) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, int>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, bool> Enabled
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.Enabled) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, bool>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::System.DateTime> CreatedOn
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.CreatedOn) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::System.DateTime>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, string> CreatedBy
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.CreatedBy) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::System.DateTime> UpdatedOn
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.UpdatedOn) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::System.DateTime>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, string> UpdatedBy
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.UpdatedBy) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::LightSwitchApplication.Interconnection> Interconnection
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.Interconnection) as global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::LightSwitchApplication.Interconnection>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::LightSwitchApplication.Node> Node
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.Node) as global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::LightSwitchApplication.Node>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::LightSwitchApplication.Protocol> Protocol
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.Protocol) as global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::LightSwitchApplication.Protocol>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::LightSwitchApplication.VendorDevice> VendorDevice
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.VendorDevice) as global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::LightSwitchApplication.VendorDevice>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityCollectionProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::LightSwitchApplication.Measurement> Measurements
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.Measurements) as global::Microsoft.LightSwitch.Details.Framework.EntityCollectionProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::LightSwitchApplication.Measurement>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::LightSwitchApplication.Historian> Historian
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.Historian) as global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::LightSwitchApplication.Historian>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::LightSwitchApplication.Company> Company
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.Company) as global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::LightSwitchApplication.Company>;
                    }
                }
                
            }
    
            #pragma warning disable 109
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
            public interface IImplementation : global::Microsoft.LightSwitch.Internal.IEntityImplementation
            {
                new int ID { get; }
                new global::System.Guid UniqueID { get; set; }
                new string Acronym { get; set; }
                new string Name { get; set; }
                new global::System.Nullable<int> HistorianID { get; set; }
                new int AccessID { get; set; }
                new global::System.Nullable<decimal> Longitude { get; set; }
                new global::System.Nullable<decimal> Latitude { get; set; }
                new string ConnectionString { get; set; }
                new string TimeZone { get; set; }
                new long TimeAdjustmentTicks { get; set; }
                new global::System.Nullable<int> TypicalDataFrequency { get; set; }
                new string DataFrequencyUnits { get; set; }
                new int MeasurementReportingInterval { get; set; }
                new string ContactList { get; set; }
                new global::System.Nullable<int> MeasuredLines { get; set; }
                new int LoadOrder { get; set; }
                new bool Enabled { get; set; }
                new global::System.DateTime CreatedOn { get; set; }
                new string CreatedBy { get; set; }
                new global::System.DateTime UpdatedOn { get; set; }
                new string UpdatedBy { get; set; }
                new global::Microsoft.LightSwitch.Internal.IEntityImplementation Interconnection { get; set; }
                new global::Microsoft.LightSwitch.Internal.IEntityImplementation Node { get; set; }
                new global::Microsoft.LightSwitch.Internal.IEntityImplementation Protocol { get; set; }
                new global::Microsoft.LightSwitch.Internal.IEntityImplementation VendorDevice { get; set; }
                new global::System.Collections.IEnumerable Measurements { get; }
                new global::Microsoft.LightSwitch.Internal.IEntityImplementation Historian { get; set; }
                new global::Microsoft.LightSwitch.Internal.IEntityImplementation Company { get; set; }
            }
            #pragma warning restore 109
    
            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal class PropertySetProperties
            {
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, int>.Entry
                    ID = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, int>.Entry(
                        "ID",
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._ID_Stub,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._ID_ComputeIsReadOnly,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._ID_Validate,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._ID_GetImplementationValue,
                        null,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._ID_OnValueChanged);
                private static void _ID_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Device.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, int>.Data> c, global::LightSwitchApplication.Device.DetailsClass d, object sf)
                {
                    c(d, ref d._ID, sf);
                }
                private static bool _ID_ComputeIsReadOnly(global::LightSwitchApplication.Device e)
                {
                    bool result = false;
                    e.ID_IsReadOnly(ref result);
                    return result;
                }
                private static void _ID_Validate(global::LightSwitchApplication.Device e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.ID_Validate(r);
                }
                private static int _ID_GetImplementationValue(global::LightSwitchApplication.Device.DetailsClass d)
                {
                    return d.ImplementationEntity.ID;
                }
                private static void _ID_OnValueChanged(global::LightSwitchApplication.Device e)
                {
                    e.ID_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::System.Guid>.Entry
                    UniqueID = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::System.Guid>.Entry(
                        "UniqueID",
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._UniqueID_Stub,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._UniqueID_ComputeIsReadOnly,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._UniqueID_Validate,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._UniqueID_GetImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._UniqueID_SetImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._UniqueID_OnValueChanged);
                private static void _UniqueID_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Device.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::System.Guid>.Data> c, global::LightSwitchApplication.Device.DetailsClass d, object sf)
                {
                    c(d, ref d._UniqueID, sf);
                }
                private static bool _UniqueID_ComputeIsReadOnly(global::LightSwitchApplication.Device e)
                {
                    bool result = false;
                    e.UniqueID_IsReadOnly(ref result);
                    return result;
                }
                private static void _UniqueID_Validate(global::LightSwitchApplication.Device e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.UniqueID_Validate(r);
                }
                private static global::System.Guid _UniqueID_GetImplementationValue(global::LightSwitchApplication.Device.DetailsClass d)
                {
                    return d.ImplementationEntity.UniqueID;
                }
                private static void _UniqueID_SetImplementationValue(global::LightSwitchApplication.Device.DetailsClass d, global::System.Guid v)
                {
                    d.ImplementationEntity.UniqueID = v;
                }
                private static void _UniqueID_OnValueChanged(global::LightSwitchApplication.Device e)
                {
                    e.UniqueID_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, string>.Entry
                    Acronym = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, string>.Entry(
                        "Acronym",
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Acronym_Stub,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Acronym_ComputeIsReadOnly,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Acronym_Validate,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Acronym_GetImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Acronym_SetImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Acronym_OnValueChanged);
                private static void _Acronym_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Device.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, string>.Data> c, global::LightSwitchApplication.Device.DetailsClass d, object sf)
                {
                    c(d, ref d._Acronym, sf);
                }
                private static bool _Acronym_ComputeIsReadOnly(global::LightSwitchApplication.Device e)
                {
                    bool result = false;
                    e.Acronym_IsReadOnly(ref result);
                    return result;
                }
                private static void _Acronym_Validate(global::LightSwitchApplication.Device e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Acronym_Validate(r);
                }
                private static string _Acronym_GetImplementationValue(global::LightSwitchApplication.Device.DetailsClass d)
                {
                    return d.ImplementationEntity.Acronym;
                }
                private static void _Acronym_SetImplementationValue(global::LightSwitchApplication.Device.DetailsClass d, string v)
                {
                    d.ImplementationEntity.Acronym = v;
                }
                private static void _Acronym_OnValueChanged(global::LightSwitchApplication.Device e)
                {
                    e.Acronym_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, string>.Entry
                    Name = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, string>.Entry(
                        "Name",
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Name_Stub,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Name_ComputeIsReadOnly,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Name_Validate,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Name_GetImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Name_SetImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Name_OnValueChanged);
                private static void _Name_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Device.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, string>.Data> c, global::LightSwitchApplication.Device.DetailsClass d, object sf)
                {
                    c(d, ref d._Name, sf);
                }
                private static bool _Name_ComputeIsReadOnly(global::LightSwitchApplication.Device e)
                {
                    bool result = false;
                    e.Name_IsReadOnly(ref result);
                    return result;
                }
                private static void _Name_Validate(global::LightSwitchApplication.Device e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Name_Validate(r);
                }
                private static string _Name_GetImplementationValue(global::LightSwitchApplication.Device.DetailsClass d)
                {
                    return d.ImplementationEntity.Name;
                }
                private static void _Name_SetImplementationValue(global::LightSwitchApplication.Device.DetailsClass d, string v)
                {
                    d.ImplementationEntity.Name = v;
                }
                private static void _Name_OnValueChanged(global::LightSwitchApplication.Device e)
                {
                    e.Name_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::System.Nullable<int>>.Entry
                    HistorianID = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::System.Nullable<int>>.Entry(
                        "HistorianID",
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._HistorianID_Stub,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._HistorianID_ComputeIsReadOnly,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._HistorianID_Validate,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._HistorianID_GetImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._HistorianID_SetImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._HistorianID_OnValueChanged);
                private static void _HistorianID_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Device.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::System.Nullable<int>>.Data> c, global::LightSwitchApplication.Device.DetailsClass d, object sf)
                {
                    c(d, ref d._HistorianID, sf);
                }
                private static bool _HistorianID_ComputeIsReadOnly(global::LightSwitchApplication.Device e)
                {
                    bool result = false;
                    e.HistorianID_IsReadOnly(ref result);
                    return result;
                }
                private static void _HistorianID_Validate(global::LightSwitchApplication.Device e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.HistorianID_Validate(r);
                }
                private static global::System.Nullable<int> _HistorianID_GetImplementationValue(global::LightSwitchApplication.Device.DetailsClass d)
                {
                    return d.ImplementationEntity.HistorianID;
                }
                private static void _HistorianID_SetImplementationValue(global::LightSwitchApplication.Device.DetailsClass d, global::System.Nullable<int> v)
                {
                    d.ImplementationEntity.HistorianID = v;
                }
                private static void _HistorianID_OnValueChanged(global::LightSwitchApplication.Device e)
                {
                    e.HistorianID_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, int>.Entry
                    AccessID = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, int>.Entry(
                        "AccessID",
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._AccessID_Stub,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._AccessID_ComputeIsReadOnly,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._AccessID_Validate,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._AccessID_GetImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._AccessID_SetImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._AccessID_OnValueChanged);
                private static void _AccessID_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Device.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, int>.Data> c, global::LightSwitchApplication.Device.DetailsClass d, object sf)
                {
                    c(d, ref d._AccessID, sf);
                }
                private static bool _AccessID_ComputeIsReadOnly(global::LightSwitchApplication.Device e)
                {
                    bool result = false;
                    e.AccessID_IsReadOnly(ref result);
                    return result;
                }
                private static void _AccessID_Validate(global::LightSwitchApplication.Device e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.AccessID_Validate(r);
                }
                private static int _AccessID_GetImplementationValue(global::LightSwitchApplication.Device.DetailsClass d)
                {
                    return d.ImplementationEntity.AccessID;
                }
                private static void _AccessID_SetImplementationValue(global::LightSwitchApplication.Device.DetailsClass d, int v)
                {
                    d.ImplementationEntity.AccessID = v;
                }
                private static void _AccessID_OnValueChanged(global::LightSwitchApplication.Device e)
                {
                    e.AccessID_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::System.Nullable<decimal>>.Entry
                    Longitude = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::System.Nullable<decimal>>.Entry(
                        "Longitude",
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Longitude_Stub,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Longitude_ComputeIsReadOnly,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Longitude_Validate,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Longitude_GetImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Longitude_SetImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Longitude_OnValueChanged);
                private static void _Longitude_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Device.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::System.Nullable<decimal>>.Data> c, global::LightSwitchApplication.Device.DetailsClass d, object sf)
                {
                    c(d, ref d._Longitude, sf);
                }
                private static bool _Longitude_ComputeIsReadOnly(global::LightSwitchApplication.Device e)
                {
                    bool result = false;
                    e.Longitude_IsReadOnly(ref result);
                    return result;
                }
                private static void _Longitude_Validate(global::LightSwitchApplication.Device e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Longitude_Validate(r);
                }
                private static global::System.Nullable<decimal> _Longitude_GetImplementationValue(global::LightSwitchApplication.Device.DetailsClass d)
                {
                    return d.ImplementationEntity.Longitude;
                }
                private static void _Longitude_SetImplementationValue(global::LightSwitchApplication.Device.DetailsClass d, global::System.Nullable<decimal> v)
                {
                    d.ImplementationEntity.Longitude = v;
                }
                private static void _Longitude_OnValueChanged(global::LightSwitchApplication.Device e)
                {
                    e.Longitude_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::System.Nullable<decimal>>.Entry
                    Latitude = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::System.Nullable<decimal>>.Entry(
                        "Latitude",
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Latitude_Stub,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Latitude_ComputeIsReadOnly,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Latitude_Validate,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Latitude_GetImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Latitude_SetImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Latitude_OnValueChanged);
                private static void _Latitude_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Device.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::System.Nullable<decimal>>.Data> c, global::LightSwitchApplication.Device.DetailsClass d, object sf)
                {
                    c(d, ref d._Latitude, sf);
                }
                private static bool _Latitude_ComputeIsReadOnly(global::LightSwitchApplication.Device e)
                {
                    bool result = false;
                    e.Latitude_IsReadOnly(ref result);
                    return result;
                }
                private static void _Latitude_Validate(global::LightSwitchApplication.Device e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Latitude_Validate(r);
                }
                private static global::System.Nullable<decimal> _Latitude_GetImplementationValue(global::LightSwitchApplication.Device.DetailsClass d)
                {
                    return d.ImplementationEntity.Latitude;
                }
                private static void _Latitude_SetImplementationValue(global::LightSwitchApplication.Device.DetailsClass d, global::System.Nullable<decimal> v)
                {
                    d.ImplementationEntity.Latitude = v;
                }
                private static void _Latitude_OnValueChanged(global::LightSwitchApplication.Device e)
                {
                    e.Latitude_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, string>.Entry
                    ConnectionString = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, string>.Entry(
                        "ConnectionString",
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._ConnectionString_Stub,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._ConnectionString_ComputeIsReadOnly,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._ConnectionString_Validate,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._ConnectionString_GetImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._ConnectionString_SetImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._ConnectionString_OnValueChanged);
                private static void _ConnectionString_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Device.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, string>.Data> c, global::LightSwitchApplication.Device.DetailsClass d, object sf)
                {
                    c(d, ref d._ConnectionString, sf);
                }
                private static bool _ConnectionString_ComputeIsReadOnly(global::LightSwitchApplication.Device e)
                {
                    bool result = false;
                    e.ConnectionString_IsReadOnly(ref result);
                    return result;
                }
                private static void _ConnectionString_Validate(global::LightSwitchApplication.Device e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.ConnectionString_Validate(r);
                }
                private static string _ConnectionString_GetImplementationValue(global::LightSwitchApplication.Device.DetailsClass d)
                {
                    return d.ImplementationEntity.ConnectionString;
                }
                private static void _ConnectionString_SetImplementationValue(global::LightSwitchApplication.Device.DetailsClass d, string v)
                {
                    d.ImplementationEntity.ConnectionString = v;
                }
                private static void _ConnectionString_OnValueChanged(global::LightSwitchApplication.Device e)
                {
                    e.ConnectionString_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, string>.Entry
                    TimeZone = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, string>.Entry(
                        "TimeZone",
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._TimeZone_Stub,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._TimeZone_ComputeIsReadOnly,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._TimeZone_Validate,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._TimeZone_GetImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._TimeZone_SetImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._TimeZone_OnValueChanged);
                private static void _TimeZone_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Device.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, string>.Data> c, global::LightSwitchApplication.Device.DetailsClass d, object sf)
                {
                    c(d, ref d._TimeZone, sf);
                }
                private static bool _TimeZone_ComputeIsReadOnly(global::LightSwitchApplication.Device e)
                {
                    bool result = false;
                    e.TimeZone_IsReadOnly(ref result);
                    return result;
                }
                private static void _TimeZone_Validate(global::LightSwitchApplication.Device e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.TimeZone_Validate(r);
                }
                private static string _TimeZone_GetImplementationValue(global::LightSwitchApplication.Device.DetailsClass d)
                {
                    return d.ImplementationEntity.TimeZone;
                }
                private static void _TimeZone_SetImplementationValue(global::LightSwitchApplication.Device.DetailsClass d, string v)
                {
                    d.ImplementationEntity.TimeZone = v;
                }
                private static void _TimeZone_OnValueChanged(global::LightSwitchApplication.Device e)
                {
                    e.TimeZone_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, long>.Entry
                    TimeAdjustmentTicks = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, long>.Entry(
                        "TimeAdjustmentTicks",
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._TimeAdjustmentTicks_Stub,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._TimeAdjustmentTicks_ComputeIsReadOnly,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._TimeAdjustmentTicks_Validate,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._TimeAdjustmentTicks_GetImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._TimeAdjustmentTicks_SetImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._TimeAdjustmentTicks_OnValueChanged);
                private static void _TimeAdjustmentTicks_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Device.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, long>.Data> c, global::LightSwitchApplication.Device.DetailsClass d, object sf)
                {
                    c(d, ref d._TimeAdjustmentTicks, sf);
                }
                private static bool _TimeAdjustmentTicks_ComputeIsReadOnly(global::LightSwitchApplication.Device e)
                {
                    bool result = false;
                    e.TimeAdjustmentTicks_IsReadOnly(ref result);
                    return result;
                }
                private static void _TimeAdjustmentTicks_Validate(global::LightSwitchApplication.Device e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.TimeAdjustmentTicks_Validate(r);
                }
                private static long _TimeAdjustmentTicks_GetImplementationValue(global::LightSwitchApplication.Device.DetailsClass d)
                {
                    return d.ImplementationEntity.TimeAdjustmentTicks;
                }
                private static void _TimeAdjustmentTicks_SetImplementationValue(global::LightSwitchApplication.Device.DetailsClass d, long v)
                {
                    d.ImplementationEntity.TimeAdjustmentTicks = v;
                }
                private static void _TimeAdjustmentTicks_OnValueChanged(global::LightSwitchApplication.Device e)
                {
                    e.TimeAdjustmentTicks_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::System.Nullable<int>>.Entry
                    TypicalDataFrequency = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::System.Nullable<int>>.Entry(
                        "TypicalDataFrequency",
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._TypicalDataFrequency_Stub,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._TypicalDataFrequency_ComputeIsReadOnly,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._TypicalDataFrequency_Validate,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._TypicalDataFrequency_GetImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._TypicalDataFrequency_SetImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._TypicalDataFrequency_OnValueChanged);
                private static void _TypicalDataFrequency_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Device.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::System.Nullable<int>>.Data> c, global::LightSwitchApplication.Device.DetailsClass d, object sf)
                {
                    c(d, ref d._TypicalDataFrequency, sf);
                }
                private static bool _TypicalDataFrequency_ComputeIsReadOnly(global::LightSwitchApplication.Device e)
                {
                    bool result = false;
                    e.TypicalDataFrequency_IsReadOnly(ref result);
                    return result;
                }
                private static void _TypicalDataFrequency_Validate(global::LightSwitchApplication.Device e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.TypicalDataFrequency_Validate(r);
                }
                private static global::System.Nullable<int> _TypicalDataFrequency_GetImplementationValue(global::LightSwitchApplication.Device.DetailsClass d)
                {
                    return d.ImplementationEntity.TypicalDataFrequency;
                }
                private static void _TypicalDataFrequency_SetImplementationValue(global::LightSwitchApplication.Device.DetailsClass d, global::System.Nullable<int> v)
                {
                    d.ImplementationEntity.TypicalDataFrequency = v;
                }
                private static void _TypicalDataFrequency_OnValueChanged(global::LightSwitchApplication.Device e)
                {
                    e.TypicalDataFrequency_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, string>.Entry
                    DataFrequencyUnits = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, string>.Entry(
                        "DataFrequencyUnits",
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._DataFrequencyUnits_Stub,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._DataFrequencyUnits_ComputeIsReadOnly,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._DataFrequencyUnits_Validate,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._DataFrequencyUnits_GetImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._DataFrequencyUnits_SetImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._DataFrequencyUnits_OnValueChanged);
                private static void _DataFrequencyUnits_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Device.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, string>.Data> c, global::LightSwitchApplication.Device.DetailsClass d, object sf)
                {
                    c(d, ref d._DataFrequencyUnits, sf);
                }
                private static bool _DataFrequencyUnits_ComputeIsReadOnly(global::LightSwitchApplication.Device e)
                {
                    bool result = false;
                    e.DataFrequencyUnits_IsReadOnly(ref result);
                    return result;
                }
                private static void _DataFrequencyUnits_Validate(global::LightSwitchApplication.Device e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.DataFrequencyUnits_Validate(r);
                }
                private static string _DataFrequencyUnits_GetImplementationValue(global::LightSwitchApplication.Device.DetailsClass d)
                {
                    return d.ImplementationEntity.DataFrequencyUnits;
                }
                private static void _DataFrequencyUnits_SetImplementationValue(global::LightSwitchApplication.Device.DetailsClass d, string v)
                {
                    d.ImplementationEntity.DataFrequencyUnits = v;
                }
                private static void _DataFrequencyUnits_OnValueChanged(global::LightSwitchApplication.Device e)
                {
                    e.DataFrequencyUnits_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, int>.Entry
                    MeasurementReportingInterval = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, int>.Entry(
                        "MeasurementReportingInterval",
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._MeasurementReportingInterval_Stub,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._MeasurementReportingInterval_ComputeIsReadOnly,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._MeasurementReportingInterval_Validate,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._MeasurementReportingInterval_GetImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._MeasurementReportingInterval_SetImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._MeasurementReportingInterval_OnValueChanged);
                private static void _MeasurementReportingInterval_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Device.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, int>.Data> c, global::LightSwitchApplication.Device.DetailsClass d, object sf)
                {
                    c(d, ref d._MeasurementReportingInterval, sf);
                }
                private static bool _MeasurementReportingInterval_ComputeIsReadOnly(global::LightSwitchApplication.Device e)
                {
                    bool result = false;
                    e.MeasurementReportingInterval_IsReadOnly(ref result);
                    return result;
                }
                private static void _MeasurementReportingInterval_Validate(global::LightSwitchApplication.Device e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.MeasurementReportingInterval_Validate(r);
                }
                private static int _MeasurementReportingInterval_GetImplementationValue(global::LightSwitchApplication.Device.DetailsClass d)
                {
                    return d.ImplementationEntity.MeasurementReportingInterval;
                }
                private static void _MeasurementReportingInterval_SetImplementationValue(global::LightSwitchApplication.Device.DetailsClass d, int v)
                {
                    d.ImplementationEntity.MeasurementReportingInterval = v;
                }
                private static void _MeasurementReportingInterval_OnValueChanged(global::LightSwitchApplication.Device e)
                {
                    e.MeasurementReportingInterval_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, string>.Entry
                    ContactList = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, string>.Entry(
                        "ContactList",
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._ContactList_Stub,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._ContactList_ComputeIsReadOnly,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._ContactList_Validate,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._ContactList_GetImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._ContactList_SetImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._ContactList_OnValueChanged);
                private static void _ContactList_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Device.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, string>.Data> c, global::LightSwitchApplication.Device.DetailsClass d, object sf)
                {
                    c(d, ref d._ContactList, sf);
                }
                private static bool _ContactList_ComputeIsReadOnly(global::LightSwitchApplication.Device e)
                {
                    bool result = false;
                    e.ContactList_IsReadOnly(ref result);
                    return result;
                }
                private static void _ContactList_Validate(global::LightSwitchApplication.Device e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.ContactList_Validate(r);
                }
                private static string _ContactList_GetImplementationValue(global::LightSwitchApplication.Device.DetailsClass d)
                {
                    return d.ImplementationEntity.ContactList;
                }
                private static void _ContactList_SetImplementationValue(global::LightSwitchApplication.Device.DetailsClass d, string v)
                {
                    d.ImplementationEntity.ContactList = v;
                }
                private static void _ContactList_OnValueChanged(global::LightSwitchApplication.Device e)
                {
                    e.ContactList_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::System.Nullable<int>>.Entry
                    MeasuredLines = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::System.Nullable<int>>.Entry(
                        "MeasuredLines",
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._MeasuredLines_Stub,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._MeasuredLines_ComputeIsReadOnly,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._MeasuredLines_Validate,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._MeasuredLines_GetImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._MeasuredLines_SetImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._MeasuredLines_OnValueChanged);
                private static void _MeasuredLines_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Device.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::System.Nullable<int>>.Data> c, global::LightSwitchApplication.Device.DetailsClass d, object sf)
                {
                    c(d, ref d._MeasuredLines, sf);
                }
                private static bool _MeasuredLines_ComputeIsReadOnly(global::LightSwitchApplication.Device e)
                {
                    bool result = false;
                    e.MeasuredLines_IsReadOnly(ref result);
                    return result;
                }
                private static void _MeasuredLines_Validate(global::LightSwitchApplication.Device e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.MeasuredLines_Validate(r);
                }
                private static global::System.Nullable<int> _MeasuredLines_GetImplementationValue(global::LightSwitchApplication.Device.DetailsClass d)
                {
                    return d.ImplementationEntity.MeasuredLines;
                }
                private static void _MeasuredLines_SetImplementationValue(global::LightSwitchApplication.Device.DetailsClass d, global::System.Nullable<int> v)
                {
                    d.ImplementationEntity.MeasuredLines = v;
                }
                private static void _MeasuredLines_OnValueChanged(global::LightSwitchApplication.Device e)
                {
                    e.MeasuredLines_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, int>.Entry
                    LoadOrder = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, int>.Entry(
                        "LoadOrder",
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._LoadOrder_Stub,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._LoadOrder_ComputeIsReadOnly,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._LoadOrder_Validate,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._LoadOrder_GetImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._LoadOrder_SetImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._LoadOrder_OnValueChanged);
                private static void _LoadOrder_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Device.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, int>.Data> c, global::LightSwitchApplication.Device.DetailsClass d, object sf)
                {
                    c(d, ref d._LoadOrder, sf);
                }
                private static bool _LoadOrder_ComputeIsReadOnly(global::LightSwitchApplication.Device e)
                {
                    bool result = false;
                    e.LoadOrder_IsReadOnly(ref result);
                    return result;
                }
                private static void _LoadOrder_Validate(global::LightSwitchApplication.Device e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.LoadOrder_Validate(r);
                }
                private static int _LoadOrder_GetImplementationValue(global::LightSwitchApplication.Device.DetailsClass d)
                {
                    return d.ImplementationEntity.LoadOrder;
                }
                private static void _LoadOrder_SetImplementationValue(global::LightSwitchApplication.Device.DetailsClass d, int v)
                {
                    d.ImplementationEntity.LoadOrder = v;
                }
                private static void _LoadOrder_OnValueChanged(global::LightSwitchApplication.Device e)
                {
                    e.LoadOrder_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, bool>.Entry
                    Enabled = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, bool>.Entry(
                        "Enabled",
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Enabled_Stub,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Enabled_ComputeIsReadOnly,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Enabled_Validate,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Enabled_GetImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Enabled_SetImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Enabled_OnValueChanged);
                private static void _Enabled_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Device.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, bool>.Data> c, global::LightSwitchApplication.Device.DetailsClass d, object sf)
                {
                    c(d, ref d._Enabled, sf);
                }
                private static bool _Enabled_ComputeIsReadOnly(global::LightSwitchApplication.Device e)
                {
                    bool result = false;
                    e.Enabled_IsReadOnly(ref result);
                    return result;
                }
                private static void _Enabled_Validate(global::LightSwitchApplication.Device e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Enabled_Validate(r);
                }
                private static bool _Enabled_GetImplementationValue(global::LightSwitchApplication.Device.DetailsClass d)
                {
                    return d.ImplementationEntity.Enabled;
                }
                private static void _Enabled_SetImplementationValue(global::LightSwitchApplication.Device.DetailsClass d, bool v)
                {
                    d.ImplementationEntity.Enabled = v;
                }
                private static void _Enabled_OnValueChanged(global::LightSwitchApplication.Device e)
                {
                    e.Enabled_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::System.DateTime>.Entry
                    CreatedOn = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::System.DateTime>.Entry(
                        "CreatedOn",
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._CreatedOn_Stub,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._CreatedOn_ComputeIsReadOnly,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._CreatedOn_Validate,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._CreatedOn_GetImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._CreatedOn_SetImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._CreatedOn_OnValueChanged);
                private static void _CreatedOn_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Device.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::System.DateTime>.Data> c, global::LightSwitchApplication.Device.DetailsClass d, object sf)
                {
                    c(d, ref d._CreatedOn, sf);
                }
                private static bool _CreatedOn_ComputeIsReadOnly(global::LightSwitchApplication.Device e)
                {
                    bool result = false;
                    e.CreatedOn_IsReadOnly(ref result);
                    return result;
                }
                private static void _CreatedOn_Validate(global::LightSwitchApplication.Device e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.CreatedOn_Validate(r);
                }
                private static global::System.DateTime _CreatedOn_GetImplementationValue(global::LightSwitchApplication.Device.DetailsClass d)
                {
                    return d.ImplementationEntity.CreatedOn;
                }
                private static void _CreatedOn_SetImplementationValue(global::LightSwitchApplication.Device.DetailsClass d, global::System.DateTime v)
                {
                    d.ImplementationEntity.CreatedOn = global::LightSwitchApplication.Device.DetailsClass.ClearDateTimeKind(v);
                }
                private static void _CreatedOn_OnValueChanged(global::LightSwitchApplication.Device e)
                {
                    e.CreatedOn_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, string>.Entry
                    CreatedBy = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, string>.Entry(
                        "CreatedBy",
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._CreatedBy_Stub,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._CreatedBy_ComputeIsReadOnly,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._CreatedBy_Validate,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._CreatedBy_GetImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._CreatedBy_SetImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._CreatedBy_OnValueChanged);
                private static void _CreatedBy_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Device.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, string>.Data> c, global::LightSwitchApplication.Device.DetailsClass d, object sf)
                {
                    c(d, ref d._CreatedBy, sf);
                }
                private static bool _CreatedBy_ComputeIsReadOnly(global::LightSwitchApplication.Device e)
                {
                    bool result = false;
                    e.CreatedBy_IsReadOnly(ref result);
                    return result;
                }
                private static void _CreatedBy_Validate(global::LightSwitchApplication.Device e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.CreatedBy_Validate(r);
                }
                private static string _CreatedBy_GetImplementationValue(global::LightSwitchApplication.Device.DetailsClass d)
                {
                    return d.ImplementationEntity.CreatedBy;
                }
                private static void _CreatedBy_SetImplementationValue(global::LightSwitchApplication.Device.DetailsClass d, string v)
                {
                    d.ImplementationEntity.CreatedBy = v;
                }
                private static void _CreatedBy_OnValueChanged(global::LightSwitchApplication.Device e)
                {
                    e.CreatedBy_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::System.DateTime>.Entry
                    UpdatedOn = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::System.DateTime>.Entry(
                        "UpdatedOn",
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._UpdatedOn_Stub,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._UpdatedOn_ComputeIsReadOnly,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._UpdatedOn_Validate,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._UpdatedOn_GetImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._UpdatedOn_SetImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._UpdatedOn_OnValueChanged);
                private static void _UpdatedOn_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Device.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::System.DateTime>.Data> c, global::LightSwitchApplication.Device.DetailsClass d, object sf)
                {
                    c(d, ref d._UpdatedOn, sf);
                }
                private static bool _UpdatedOn_ComputeIsReadOnly(global::LightSwitchApplication.Device e)
                {
                    bool result = false;
                    e.UpdatedOn_IsReadOnly(ref result);
                    return result;
                }
                private static void _UpdatedOn_Validate(global::LightSwitchApplication.Device e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.UpdatedOn_Validate(r);
                }
                private static global::System.DateTime _UpdatedOn_GetImplementationValue(global::LightSwitchApplication.Device.DetailsClass d)
                {
                    return d.ImplementationEntity.UpdatedOn;
                }
                private static void _UpdatedOn_SetImplementationValue(global::LightSwitchApplication.Device.DetailsClass d, global::System.DateTime v)
                {
                    d.ImplementationEntity.UpdatedOn = global::LightSwitchApplication.Device.DetailsClass.ClearDateTimeKind(v);
                }
                private static void _UpdatedOn_OnValueChanged(global::LightSwitchApplication.Device e)
                {
                    e.UpdatedOn_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, string>.Entry
                    UpdatedBy = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, string>.Entry(
                        "UpdatedBy",
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._UpdatedBy_Stub,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._UpdatedBy_ComputeIsReadOnly,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._UpdatedBy_Validate,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._UpdatedBy_GetImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._UpdatedBy_SetImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._UpdatedBy_OnValueChanged);
                private static void _UpdatedBy_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Device.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, string>.Data> c, global::LightSwitchApplication.Device.DetailsClass d, object sf)
                {
                    c(d, ref d._UpdatedBy, sf);
                }
                private static bool _UpdatedBy_ComputeIsReadOnly(global::LightSwitchApplication.Device e)
                {
                    bool result = false;
                    e.UpdatedBy_IsReadOnly(ref result);
                    return result;
                }
                private static void _UpdatedBy_Validate(global::LightSwitchApplication.Device e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.UpdatedBy_Validate(r);
                }
                private static string _UpdatedBy_GetImplementationValue(global::LightSwitchApplication.Device.DetailsClass d)
                {
                    return d.ImplementationEntity.UpdatedBy;
                }
                private static void _UpdatedBy_SetImplementationValue(global::LightSwitchApplication.Device.DetailsClass d, string v)
                {
                    d.ImplementationEntity.UpdatedBy = v;
                }
                private static void _UpdatedBy_OnValueChanged(global::LightSwitchApplication.Device e)
                {
                    e.UpdatedBy_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::LightSwitchApplication.Interconnection>.Entry
                    Interconnection = new global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::LightSwitchApplication.Interconnection>.Entry(
                        "Interconnection",
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Interconnection_Stub,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Interconnection_ComputeIsReadOnly,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Interconnection_Validate,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Interconnection_GetCoreImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Interconnection_GetImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Interconnection_SetImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Interconnection_Refresh,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Interconnection_OnValueChanged);
                private static void _Interconnection_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Device.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::LightSwitchApplication.Interconnection>.Data> c, global::LightSwitchApplication.Device.DetailsClass d, object sf)
                {
                    c(d, ref d._Interconnection, sf);
                }
                private static bool _Interconnection_ComputeIsReadOnly(global::LightSwitchApplication.Device e)
                {
                    bool result = false;
                    e.Interconnection_IsReadOnly(ref result);
                    return result;
                }
                private static void _Interconnection_Validate(global::LightSwitchApplication.Device e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Interconnection_Validate(r);
                }
                private static global::Microsoft.LightSwitch.Internal.IEntityImplementation _Interconnection_GetCoreImplementationValue(global::LightSwitchApplication.Device.DetailsClass d)
                {
                    return d.ImplementationEntity.Interconnection;
                }
                private static global::LightSwitchApplication.Interconnection _Interconnection_GetImplementationValue(global::LightSwitchApplication.Device.DetailsClass d)
                {
                    return d.GetImplementationValue<global::LightSwitchApplication.Interconnection, global::LightSwitchApplication.Interconnection.DetailsClass>(global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.Interconnection, ref d._Interconnection);
                }
                private static void _Interconnection_SetImplementationValue(global::LightSwitchApplication.Device.DetailsClass d, global::LightSwitchApplication.Interconnection v)
                {
                    d.SetImplementationValue(global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.Interconnection, ref d._Interconnection, (i, ev) => i.Interconnection = ev, v);
                }
                private static void _Interconnection_Refresh(global::LightSwitchApplication.Device.DetailsClass d)
                {
                    d.RefreshNavigationProperty(global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.Interconnection, ref d._Interconnection);
                }
                private static void _Interconnection_OnValueChanged(global::LightSwitchApplication.Device e)
                {
                    e.Interconnection_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::LightSwitchApplication.Node>.Entry
                    Node = new global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::LightSwitchApplication.Node>.Entry(
                        "Node",
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Node_Stub,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Node_ComputeIsReadOnly,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Node_Validate,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Node_GetCoreImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Node_GetImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Node_SetImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Node_Refresh,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Node_OnValueChanged);
                private static void _Node_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Device.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::LightSwitchApplication.Node>.Data> c, global::LightSwitchApplication.Device.DetailsClass d, object sf)
                {
                    c(d, ref d._Node, sf);
                }
                private static bool _Node_ComputeIsReadOnly(global::LightSwitchApplication.Device e)
                {
                    bool result = false;
                    e.Node_IsReadOnly(ref result);
                    return result;
                }
                private static void _Node_Validate(global::LightSwitchApplication.Device e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Node_Validate(r);
                }
                private static global::Microsoft.LightSwitch.Internal.IEntityImplementation _Node_GetCoreImplementationValue(global::LightSwitchApplication.Device.DetailsClass d)
                {
                    return d.ImplementationEntity.Node;
                }
                private static global::LightSwitchApplication.Node _Node_GetImplementationValue(global::LightSwitchApplication.Device.DetailsClass d)
                {
                    return d.GetImplementationValue<global::LightSwitchApplication.Node, global::LightSwitchApplication.Node.DetailsClass>(global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.Node, ref d._Node);
                }
                private static void _Node_SetImplementationValue(global::LightSwitchApplication.Device.DetailsClass d, global::LightSwitchApplication.Node v)
                {
                    d.SetImplementationValue(global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.Node, ref d._Node, (i, ev) => i.Node = ev, v);
                }
                private static void _Node_Refresh(global::LightSwitchApplication.Device.DetailsClass d)
                {
                    d.RefreshNavigationProperty(global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.Node, ref d._Node);
                }
                private static void _Node_OnValueChanged(global::LightSwitchApplication.Device e)
                {
                    e.Node_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::LightSwitchApplication.Protocol>.Entry
                    Protocol = new global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::LightSwitchApplication.Protocol>.Entry(
                        "Protocol",
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Protocol_Stub,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Protocol_ComputeIsReadOnly,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Protocol_Validate,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Protocol_GetCoreImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Protocol_GetImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Protocol_SetImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Protocol_Refresh,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Protocol_OnValueChanged);
                private static void _Protocol_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Device.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::LightSwitchApplication.Protocol>.Data> c, global::LightSwitchApplication.Device.DetailsClass d, object sf)
                {
                    c(d, ref d._Protocol, sf);
                }
                private static bool _Protocol_ComputeIsReadOnly(global::LightSwitchApplication.Device e)
                {
                    bool result = false;
                    e.Protocol_IsReadOnly(ref result);
                    return result;
                }
                private static void _Protocol_Validate(global::LightSwitchApplication.Device e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Protocol_Validate(r);
                }
                private static global::Microsoft.LightSwitch.Internal.IEntityImplementation _Protocol_GetCoreImplementationValue(global::LightSwitchApplication.Device.DetailsClass d)
                {
                    return d.ImplementationEntity.Protocol;
                }
                private static global::LightSwitchApplication.Protocol _Protocol_GetImplementationValue(global::LightSwitchApplication.Device.DetailsClass d)
                {
                    return d.GetImplementationValue<global::LightSwitchApplication.Protocol, global::LightSwitchApplication.Protocol.DetailsClass>(global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.Protocol, ref d._Protocol);
                }
                private static void _Protocol_SetImplementationValue(global::LightSwitchApplication.Device.DetailsClass d, global::LightSwitchApplication.Protocol v)
                {
                    d.SetImplementationValue(global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.Protocol, ref d._Protocol, (i, ev) => i.Protocol = ev, v);
                }
                private static void _Protocol_Refresh(global::LightSwitchApplication.Device.DetailsClass d)
                {
                    d.RefreshNavigationProperty(global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.Protocol, ref d._Protocol);
                }
                private static void _Protocol_OnValueChanged(global::LightSwitchApplication.Device e)
                {
                    e.Protocol_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::LightSwitchApplication.VendorDevice>.Entry
                    VendorDevice = new global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::LightSwitchApplication.VendorDevice>.Entry(
                        "VendorDevice",
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._VendorDevice_Stub,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._VendorDevice_ComputeIsReadOnly,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._VendorDevice_Validate,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._VendorDevice_GetCoreImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._VendorDevice_GetImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._VendorDevice_SetImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._VendorDevice_Refresh,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._VendorDevice_OnValueChanged);
                private static void _VendorDevice_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Device.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::LightSwitchApplication.VendorDevice>.Data> c, global::LightSwitchApplication.Device.DetailsClass d, object sf)
                {
                    c(d, ref d._VendorDevice, sf);
                }
                private static bool _VendorDevice_ComputeIsReadOnly(global::LightSwitchApplication.Device e)
                {
                    bool result = false;
                    e.VendorDevice_IsReadOnly(ref result);
                    return result;
                }
                private static void _VendorDevice_Validate(global::LightSwitchApplication.Device e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.VendorDevice_Validate(r);
                }
                private static global::Microsoft.LightSwitch.Internal.IEntityImplementation _VendorDevice_GetCoreImplementationValue(global::LightSwitchApplication.Device.DetailsClass d)
                {
                    return d.ImplementationEntity.VendorDevice;
                }
                private static global::LightSwitchApplication.VendorDevice _VendorDevice_GetImplementationValue(global::LightSwitchApplication.Device.DetailsClass d)
                {
                    return d.GetImplementationValue<global::LightSwitchApplication.VendorDevice, global::LightSwitchApplication.VendorDevice.DetailsClass>(global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.VendorDevice, ref d._VendorDevice);
                }
                private static void _VendorDevice_SetImplementationValue(global::LightSwitchApplication.Device.DetailsClass d, global::LightSwitchApplication.VendorDevice v)
                {
                    d.SetImplementationValue(global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.VendorDevice, ref d._VendorDevice, (i, ev) => i.VendorDevice = ev, v);
                }
                private static void _VendorDevice_Refresh(global::LightSwitchApplication.Device.DetailsClass d)
                {
                    d.RefreshNavigationProperty(global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.VendorDevice, ref d._VendorDevice);
                }
                private static void _VendorDevice_OnValueChanged(global::LightSwitchApplication.Device e)
                {
                    e.VendorDevice_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityCollectionProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::LightSwitchApplication.Measurement>.Entry
                    Measurements = new global::Microsoft.LightSwitch.Details.Framework.EntityCollectionProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::LightSwitchApplication.Measurement>.Entry(
                        "Measurements",
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Measurements_Stub,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Measurements_GetReferencedEntities,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Measurements_GetEntityCollection);
                private static void _Measurements_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Device.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityCollectionProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::LightSwitchApplication.Measurement>.Data> c, global::LightSwitchApplication.Device.DetailsClass d, object sf)
                {
                    c(d, ref d._Measurements, sf);
                }
                private static global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Measurement> _Measurements_GetReferencedEntities(global::LightSwitchApplication.Device.DetailsClass d)
                {
                    return d.GetReferencedEntities<global::LightSwitchApplication.Measurement, global::LightSwitchApplication.Measurement.DetailsClass>(global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.Measurements, ref d._Measurements);
                }
                private static global::System.Collections.IEnumerable _Measurements_GetEntityCollection(global::LightSwitchApplication.Device.DetailsClass d)
                {
                    return d.ImplementationEntity.Measurements;
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::LightSwitchApplication.Historian>.Entry
                    Historian = new global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::LightSwitchApplication.Historian>.Entry(
                        "Historian",
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Historian_Stub,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Historian_ComputeIsReadOnly,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Historian_Validate,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Historian_GetCoreImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Historian_GetImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Historian_SetImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Historian_Refresh,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Historian_OnValueChanged);
                private static void _Historian_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Device.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::LightSwitchApplication.Historian>.Data> c, global::LightSwitchApplication.Device.DetailsClass d, object sf)
                {
                    c(d, ref d._Historian, sf);
                }
                private static bool _Historian_ComputeIsReadOnly(global::LightSwitchApplication.Device e)
                {
                    bool result = false;
                    e.Historian_IsReadOnly(ref result);
                    return result;
                }
                private static void _Historian_Validate(global::LightSwitchApplication.Device e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Historian_Validate(r);
                }
                private static global::Microsoft.LightSwitch.Internal.IEntityImplementation _Historian_GetCoreImplementationValue(global::LightSwitchApplication.Device.DetailsClass d)
                {
                    return d.ImplementationEntity.Historian;
                }
                private static global::LightSwitchApplication.Historian _Historian_GetImplementationValue(global::LightSwitchApplication.Device.DetailsClass d)
                {
                    return d.GetImplementationValue<global::LightSwitchApplication.Historian, global::LightSwitchApplication.Historian.DetailsClass>(global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.Historian, ref d._Historian);
                }
                private static void _Historian_SetImplementationValue(global::LightSwitchApplication.Device.DetailsClass d, global::LightSwitchApplication.Historian v)
                {
                    d.SetImplementationValue(global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.Historian, ref d._Historian, (i, ev) => i.Historian = ev, v);
                }
                private static void _Historian_Refresh(global::LightSwitchApplication.Device.DetailsClass d)
                {
                    d.RefreshNavigationProperty(global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.Historian, ref d._Historian);
                }
                private static void _Historian_OnValueChanged(global::LightSwitchApplication.Device e)
                {
                    e.Historian_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::LightSwitchApplication.Company>.Entry
                    Company = new global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::LightSwitchApplication.Company>.Entry(
                        "Company",
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Company_Stub,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Company_ComputeIsReadOnly,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Company_Validate,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Company_GetCoreImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Company_GetImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Company_SetImplementationValue,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Company_Refresh,
                        global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties._Company_OnValueChanged);
                private static void _Company_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Device.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::LightSwitchApplication.Company>.Data> c, global::LightSwitchApplication.Device.DetailsClass d, object sf)
                {
                    c(d, ref d._Company, sf);
                }
                private static bool _Company_ComputeIsReadOnly(global::LightSwitchApplication.Device e)
                {
                    bool result = false;
                    e.Company_IsReadOnly(ref result);
                    return result;
                }
                private static void _Company_Validate(global::LightSwitchApplication.Device e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Company_Validate(r);
                }
                private static global::Microsoft.LightSwitch.Internal.IEntityImplementation _Company_GetCoreImplementationValue(global::LightSwitchApplication.Device.DetailsClass d)
                {
                    return d.ImplementationEntity.Company;
                }
                private static global::LightSwitchApplication.Company _Company_GetImplementationValue(global::LightSwitchApplication.Device.DetailsClass d)
                {
                    return d.GetImplementationValue<global::LightSwitchApplication.Company, global::LightSwitchApplication.Company.DetailsClass>(global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.Company, ref d._Company);
                }
                private static void _Company_SetImplementationValue(global::LightSwitchApplication.Device.DetailsClass d, global::LightSwitchApplication.Company v)
                {
                    d.SetImplementationValue(global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.Company, ref d._Company, (i, ev) => i.Company = ev, v);
                }
                private static void _Company_Refresh(global::LightSwitchApplication.Device.DetailsClass d)
                {
                    d.RefreshNavigationProperty(global::LightSwitchApplication.Device.DetailsClass.PropertySetProperties.Company, ref d._Company);
                }
                private static void _Company_OnValueChanged(global::LightSwitchApplication.Device e)
                {
                    e.Company_Changed();
                }
    
            }
    
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, int>.Data _ID;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::System.Guid>.Data _UniqueID;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, string>.Data _Acronym;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, string>.Data _Name;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::System.Nullable<int>>.Data _HistorianID;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, int>.Data _AccessID;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::System.Nullable<decimal>>.Data _Longitude;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::System.Nullable<decimal>>.Data _Latitude;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, string>.Data _ConnectionString;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, string>.Data _TimeZone;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, long>.Data _TimeAdjustmentTicks;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::System.Nullable<int>>.Data _TypicalDataFrequency;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, string>.Data _DataFrequencyUnits;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, int>.Data _MeasurementReportingInterval;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, string>.Data _ContactList;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::System.Nullable<int>>.Data _MeasuredLines;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, int>.Data _LoadOrder;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, bool>.Data _Enabled;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::System.DateTime>.Data _CreatedOn;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, string>.Data _CreatedBy;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::System.DateTime>.Data _UpdatedOn;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, string>.Data _UpdatedBy;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::LightSwitchApplication.Interconnection>.Data _Interconnection;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::LightSwitchApplication.Node>.Data _Node;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::LightSwitchApplication.Protocol>.Data _Protocol;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::LightSwitchApplication.VendorDevice>.Data _VendorDevice;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityCollectionProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::LightSwitchApplication.Measurement>.Data _Measurements;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::LightSwitchApplication.Historian>.Data _Historian;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Device, global::LightSwitchApplication.Device.DetailsClass, global::LightSwitchApplication.Company>.Data _Company;
            
        }
    
        #endregion
    }
    
    #endregion
}
