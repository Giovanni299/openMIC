@*******************************************************************************************************
//  Devices.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may
//  not use this file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  01/15/2016 - J. Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using System
@using System.Text
@using openMIC
@using openMIC.Model
@using RazorEngine.Templating
@inherits TemplateBase<AppModel>
@section StyleSheets {
    <style>
        html, body {
            height: 100%;
        }
    </style>
}
@{
    Layout = "Layout.cshtml";
    ViewBag.Title = "Devices";
    ViewBag.PageControlScripts = new StringBuilder();

    ViewBag.HeaderColumns = new[]
    {   //    { "Field", "Label", "Classes" }
        new[] { null, "Status", "text-center valign-middle" },
        new[] { "Acronym", "Acronym", "text-left" },
        new[] { null, "Schedule", "text-center valign-middle" },
        new[] { "Enabled", "Enabled", "text-center" }
    };

    // Lookup default company ID
    try {
        ViewBag.DefaultCompanyID = ViewBag.DataContext.Connection.ExecuteScalar<int>("SELECT ID FROM Company WHERE Acronym={0}", Model.CompanyAcronym);
    }
    catch {
        ViewBag.DefaultCompanyID = 0;
    }

    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog().ToString();

    // Add cron pattern validation to schedule connection string field
    ViewBag.DataContext.AddFieldValidation("viewModel.connectionString.get('schedule')", @"(\*|[0-5]?[0-9]|\*\/[0-9]+)\s+(\*|1?[0-9]|2[0-3]|\*\/[0-9]+)\s+(\*|[1-2]?[0-9]|3[0-1]|\*\/[0-9]+)\s+(\*|[0-9]|1[0-2]|\*\/[0-9]+)\s+(\*\/[0-9]+|\*|[0-7])\s*(\*\/[0-9]+|\*|[0-9]+)?", "Invalid cron syntax.");
}
@helper BodyRows() {
    <td width="5%" class="text-center valign-middle"><img src="Images/StatusLights/greenlight.png" alt="Enabled" data-bind="visible: Enabled"><img src="Images/StatusLights/disabledlight.png" alt="Disabled" data-bind="visible: !Enabled"></td>
    <td width="65%" class="text-left valign-middle"><button type="button" class="btn btn-link" data-bind="text: Acronym, click: $parent.viewPageRecord"></button></td>
    <td width="20%" class="text-center" data-bind="text: notNull(ConnectionString).parseKeyValuePairs().get('schedule')"></td>
    <td width="5%" class="text-center valign-middle"><input type="checkbox" data-bind="checked: Enabled" disabled/></td>
    <td width="5%" class="text-center valign-middle" nowrap>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.editPageRecord, enable: $parent.dataHubIsConnected"><span class="glyphicon glyphicon-pencil"></span></button>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.removePageRecord, enable: $parent.dataHubIsConnected"><span class="glyphicon glyphicon-remove"></span></button>
    </td>
}
@helper AddNewEditDialog() {
    <div class="col-md-6">
        @Raw(ViewBag.DataContext.AddInputField<Device>("Acronym"))
        @Raw(ViewBag.DataContext.AddInputField("get('connectionhostname')", true, inputLabel: "Connection Host Name/IP", fieldID: "inputConnectionHostName", groupDataBinding: "with: $root.connectionString"))
        @Raw(ViewBag.DataContext.AddInputField("get('connectionusername')", true, inputLabel: "Connection User Name", fieldID: "inputConnectionUserName", groupDataBinding: "with: $root.connectionString"))
        @Raw(ViewBag.DataContext.AddInputField("get('connectionpassword')", true, inputType: "password", inputLabel: "Connection Password", fieldID: "inputConnectionPassword", groupDataBinding: "with: $root.connectionString"))
        @Raw(ViewBag.DataContext.AddSelectField<ConnectionProfile>("get('connectionprofile')", true, "ID", "Name", "Connection Profile<span class=\"pull-right\">&nbsp;&nbsp;<a href=\"ConnectionProfiles.cshtml\"><small><em>Edit Connection Profiles</em></small></a></span>", "selectConnectionProfile", "with: $root.connectionString"))
        @Raw(ViewBag.DataContext.AddInputField("get('schedule')", true, inputLabel: "Schedule Cron<span class=\"pull-right\">&nbsp;&nbsp;<a href=\"#\" data-toggle=\"modal\" data-target=\"#cronHelpDialog\" data-backdrop=\"static\"><small><em>Syntax Help</em></small></a></span>", fieldID: "inputSchedule", groupDataBinding: "with: $root.connectionString"))
        @Raw(ViewBag.DataContext.AddSelectField<Device, VendorDevice>("VendorDeviceID", "ID", "Name", "Vendor Device"))
        @Raw(ViewBag.DataContext.AddSelectField<Device, Company>("CompanyID", "ID", "Name", "Company"))
    </div>
    <div class="col-md-6">
        <div class="checkbox" data-bind="with: $root.connectionString">
            <label><input type="checkbox" data-bind="checked: get('usedialup'), attr: {'disabled': ($root.recordMode()===RecordMode.View ? true : undefined)}"> Use Dial-up Connection</label>
        </div>
        @Raw(ViewBag.DataContext.AddInputField("get('dialupentryname')", false, inputLabel: "Dial-up RAS Connection Entry Name", fieldID: "inputDialUpRASEntry", groupDataBinding: "with: $root.connectionString", labelDataBinding: "css: {disabled: !get('usedialup')()}", customDataBinding: "enable: get('usedialup')", toolTip: "Devices using same connection entries with overlapping schedules will be queued serially"))
        @Raw(ViewBag.DataContext.AddInputField("get('dialupnumber')", false, inputType: "tel", inputLabel: "Dial-up Phone Number", fieldID: "inputDialUpPhoneNumber", groupDataBinding: "with: $root.connectionString", labelDataBinding: "css: {disabled: !get('usedialup')()}", customDataBinding: "enable: get('usedialup')"))
        @Raw(ViewBag.DataContext.AddInputField("get('dialupusername')", false, inputLabel: "Dial-up User Name", fieldID: "inputDialUpUserName", groupDataBinding: "with: $root.connectionString", labelDataBinding: "css: {disabled: !get('usedialup')()}", customDataBinding: "enable: get('usedialup')"))
        @Raw(ViewBag.DataContext.AddInputField("get('dialuppassword')", false, inputType: "password", inputLabel: "Dial-up Password", fieldID: "inputDialUpPassword", groupDataBinding: "with: $root.connectionString", labelDataBinding: "css: {disabled: !get('usedialup')()}", customDataBinding: "enable: get('usedialup')"))
        @Raw(ViewBag.DataContext.AddInputField("get('dialupretries')", false, inputType: "number", inputLabel: "Maximum Dial-up Retries", fieldID: "inputDialUpRetries", groupDataBinding: "with: $root.connectionString", labelDataBinding: "css: {disabled: !get('usedialup')()}", customDataBinding: "enable: get('usedialup')"))
        @Raw(ViewBag.DataContext.AddInputField("get('dialuptimeout')", false, inputType: "number", inputLabel: "Dial-up Connection Timeout", fieldID: "inputDialUpTimeout", groupDataBinding: "with: $root.connectionString", labelDataBinding: "css: {disabled: !get('usedialup')()}", customDataBinding: "enable: get('usedialup')"))
        <div class="checkbox">
            <label><input type="checkbox" data-bind="checked: Enabled, attr: {'disabled': ($root.recordMode()===RecordMode.View ? true : undefined)}"> Enabled</label>
        </div>
    </div>
    <div class="col-md-12">
        <div class="form-group">
            <label for="textConnectionString">Connection String:</label>
            <textarea class="form-control" rows="2" data-bind="text: ConnectionString" id="textConnectionString" readonly></textarea>
        </div>
    </div>
}
@Include("PagedViewModel.cshtml")
<div id="cronHelpDialog" class="modal fade" role="dialog">
    <div class="modal-vertical-align-container">
        <div class="modal-dialog modal-md modal-vertical-align-center">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Cron Syntax</h4>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="center-block" style="width: 380px">
                            <pre>
 # ┌───────────── min (0 - 59)
 # │ ┌────────────── hour (0 - 23)
 # │ │ ┌─────────────── day of month (1 - 31)
 # │ │ │ ┌──────────────── month (1 - 12)
 # │ │ │ │ ┌───────────────── day of week (0 - 6):
 # │ │ │ │ │        0 to 6 are Sunday to Saturday,
 # │ │ │ │ │        or 7 is Sunday, the same as 0
 # * * * * *
</pre>
                        </div>
                        <table class="small table-condensed table-center">
                            <tr>
                                <td style="text-align: right" nowrap>Every five minutes:</td>
                                <td style="text-align: left" nowrap><button class="btn btn-default btn-block btn-xs" style="padding: 0" data-dismiss="modal" data-bind="enable: recordMode()!==RecordMode.View" onclick="updateSchedule('*/5 * * * *')"><code>*/5 * * * *</code></button></td>
                                <td style="text-align: right" nowrap>Every hour:</td>
                                <td style="text-align: left" nowrap><button class="btn btn-default btn-block btn-xs" style="padding: 0" data-dismiss="modal" data-bind="enable: recordMode()!==RecordMode.View" onclick="updateSchedule('0 * * * *')"><code>&nbsp;0 * * * *&nbsp;</code></button></td>
                            </tr>
                            <tr>
                                <td style="text-align: right" nowrap>Every half-hour:</td>
                                <td style="text-align: left" nowrap><button class="btn btn-default btn-block btn-xs" style="padding: 0" data-dismiss="modal" data-bind="enable: recordMode()!==RecordMode.View" onclick="updateSchedule('30 * * * *')"><code>&nbsp;30 * * * *</code></button></td>
                                <td style="text-align: right" nowrap>Every four hours:</td>
                                <td style="text-align: left" nowrap><button class="btn btn-default btn-block btn-xs" style="padding: 0" data-dismiss="modal" data-bind="enable: recordMode()!==RecordMode.View" onclick="updateSchedule('0 */4 * * *')"><code>0 */4 * * *</code></button></td>
                            <tr>
                                <td style="text-align: right" nowrap>Every day:</td>
                                <td style="text-align: left" nowrap><button class="btn btn-default btn-block btn-xs" style="padding: 0" data-dismiss="modal" data-bind="enable: recordMode()!==RecordMode.View" onclick="updateSchedule('0 0 * * *')"><code>&nbsp;0 0 * * *&nbsp;</code></button></td>
                                <td style="text-align: right" nowrap>Every month:</td>
                                <td style="text-align: left" nowrap><button class="btn btn-default btn-block btn-xs" style="padding: 0" data-dismiss="modal" data-bind="enable: recordMode()!==RecordMode.View" onclick="updateSchedule('0 0 1 * *')"><code>&nbsp;0 0 1 * *&nbsp;</code></button></td>
                            </tr>
                        </table>
                        <br />
                        <div class="text-center">
                            <a href="https://en.wikipedia.org/wiki/Cron" target="_blank">https://en.wikipedia.org/wiki/Cron</a>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">OK</button>
                </div>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    @Raw(ViewBag.PageControlScripts.ToString())
    <script>
        "use strict";

        // Configure view model
        viewModel.defaultSortField = "ID";
        viewModel.labelField = "Acronym";
        viewModel.primaryKeyFields = ["ID"];
        viewModel.initialFocusField = "inputAcronym";

        viewModel.setQueryRecordCount(function() {
            return dataHub.queryDeviceCount();
        });

        viewModel.setQueryRecords(function(sortField, ascending, page, pageSize) {
            return dataHub.queryDevices(sortField, ascending, page, pageSize);
        });

        viewModel.setDeleteRecord(function(keyValues) {
            return dataHub.deleteDevice(keyValues[0]);
        });

        viewModel.setNewRecord(function() {
            return dataHub.newDevice();
        });

        viewModel.setAddNewRecord(function(record) {
            return dataHub.addNewDevice(record);
        });

        viewModel.setUpdateRecord(function(record) {
            return dataHub.updateDevice(record);
        });

        // Define default connection string keys needed for binding
        const defaultConnectionString = new Dictionary();

        defaultConnectionString.set("connectionHostName", "");
        defaultConnectionString.set("connectionUserName", "@Raw(Model.DefaultFTPUserName.JavaScriptEncode())");
        defaultConnectionString.set("connectionPassword", "@Raw(Model.DefaultFTPPassword.JavaScriptEncode())");
        defaultConnectionString.set("connectionProfile", 0);
        defaultConnectionString.set("schedule", "* * * * *");
        defaultConnectionString.set("useDialUp", false);
        defaultConnectionString.set("dialUpEntryName", "");
        defaultConnectionString.set("dialUpNumber", "");
        defaultConnectionString.set("dialUpUserName", "");
        defaultConnectionString.set("dialUpPassword", "");
        defaultConnectionString.set("dialUpRetries", @Model.DefaultDialUpRetries);
        defaultConnectionString.set("dialUpTimeout", @Model.DefaultDialUpTimeout);

        // Create an observable key/value pair connection string dictionary
        viewModel.connectionString = defaultConnectionString.toObservableDictionary(true);
        viewModel.loadingConnectionString = false;

        // Watch the connection string dictionary for changes independent of current record
        ko.watch(viewModel.connectionString, { depth: -1 }, function() {
            if (viewModel.loadingConnectionString)
                return;

            // Update connection string applying camel-case key names as defined in default connection string
            const updates = new Dictionary(defaultConnectionString);
            updates.pushAll(viewModel.connectionString.toJSON());
            viewModel.currentRecord().ConnectionString(updates.joinKeyValuePairs());
        });

        $(viewModel).on("derivingObservableRecord", function(event, observableRecord) {
            // Add connection string reference to current observable record so it can participate in the validation group
            observableRecord._connectionstring = viewModel.connectionString;
        });

        $(viewModel).on("derivingJSRecord", function(event, observableRecord) {
            // Remove added connection string reference before serialization
            delete observableRecord._connectionstring;
        });

        $(viewModel).on("newRecord", function(event, record) {
            // Initialize default values for new record
            record.CompanyID = @ViewBag.DefaultCompanyID;
        });

        $(viewModel).on("currentRecordChanged", function(event) {
            viewModel.loadingConnectionString = true;

            // Reset observable dictionary to default values on record change
            const keys = viewModel.connectionString.keys();

            for (let i = 0; i < keys.length; i++) {
                const key = keys[i];

                if (defaultConnectionString.containsKey(key))
                    viewModel.connectionString.set(key, defaultConnectionString.get(key));
                else
                    viewModel.connectionString.remove(key);
            }

            // Update observable dictionary with parsed key/value pairs of current connection string
            const currentConnectionString = notNull(viewModel.currentRecord().ConnectionString()).parseKeyValuePairs();
            currentConnectionString.updateObservableDictionary(viewModel.connectionString, true);

            viewModel.isDirty(false);
            viewModel.loadingConnectionString = false;
        });

        $(viewModel).on("recordDeleted", function(event, record) {
            if (hubIsConnected)
                serviceHub.sendCommand("reloadconfig");
        });

        $(viewModel).on("recordSaved", function(event, record, isNew) {
            if (!hubIsConnected)
                return;

            if (record.Enabled)
                serviceHub.sendCommand("initialize " + record.Acronym);
            else
                serviceHub.sendCommand("reloadconfig");
        });

        function updateSchedule(schedule) {
            if (viewModel.recordMode() !== RecordMode.View)
                viewModel.connectionString.get("schedule")(schedule);
        }
    </script>
}