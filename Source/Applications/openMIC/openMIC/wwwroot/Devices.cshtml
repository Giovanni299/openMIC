@*******************************************************************************************************
//  Devices.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may
//  not use this file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  01/15/2016 - J. Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using System.Text
@using openMIC.Model
@using RazorEngine.Templating
@inherits TemplateBase<AppModel>
@section StyleSheets {
    <style>
        html, body {
            height: 100%;
        }
    </style>
}
@{
    Layout = "Layout.cshtml";
    ViewBag.Title = "Devices";
    ViewBag.PageControlScripts = new StringBuilder();

    ViewBag.HeaderColumns = new[]
    {   //    { "Field", "Label", "Classes" }
        new[] { "Acronym", "Acronym", "text-left" },
        new[] { null, "Schedule", "text-center valign-middle" },
        new[] { "Enabled", "Enabled", "text-center" }
    };

    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog().ToString();
}
@helper BodyRows() {
    <td width="70%" class="text-left valign-middle"><button type="button" class="btn btn-link" data-bind="text: Acronym, click: $parent.viewPageRecord"></button></td>
    <td width="20%" class="text-center"><button type="button" class="btn btn-link"><u>Undefined</u></button></td>
    <td width="5%" class="text-center valign-middle"><input type="checkbox" data-bind="checked: Enabled" /></td>
    <td width="5%" class="text-center valign-middle" nowrap>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.editPageRecord" hub-dependent><span class="glyphicon glyphicon-pencil"></span></button>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.removePageRecord" hub-dependent><span class="glyphicon glyphicon-remove"></span></button>
    </td>
}
@helper AddNewEditDialog() {
    <div class="col-md-6">
        @Raw(ViewBag.DataContext.AddInputField<Device>("Acronym"))
        @Raw(ViewBag.DataContext.AddInputField("get('connectionusername')", true, inputLabel: "Connection User Name", fieldID: "inputConnectionUserName", groupDataBinding: "with: $root.connectionString"))
        @Raw(ViewBag.DataContext.AddInputField("get('connectionpassword')", true, inputType: "password", inputLabel: "Connection Password", fieldID: "inputConnectionPassword", groupDataBinding: "with: $root.connectionString"))
        <div class="checkbox" data-bind="with: $root.connectionString">
            <label><input type="checkbox" id="useDialUp" data-bind="checked: get('usedialup'), attr: {'disabled': ($root.recordMode()===RecordMode.View ? true : undefined)}"> Use Dial-up Connection</label>
        </div>
        @Raw(ViewBag.DataContext.AddInputField("get('dialupnumber')", false, inputType: "tel", inputLabel: "Dial-up Phone Number", fieldID: "inputDialUpPhoneNumber", groupDataBinding: "with: $root.connectionString"))
        @Raw(ViewBag.DataContext.AddInputField("get('maxconnectionretries')", false, inputType: "number", inputLabel: "Maximum Connection Retries", fieldID: "inputMaxConnectionRetries", groupDataBinding: "with: $root.connectionString"))
    </div>
    <div class="col-md-6">
        <div class="form-group">
            <label for="connectionProfile">Connection Profile:</label>
            <select class="form-control" id="connectionProfile">
                @foreach (Vendor vendor in ViewBag.DataContext.QueryRecords<Vendor>("SELECT ID, Acronym From Vendor")) {
                    <option value="@vendor.ID">@vendor.Acronym</option>
                }
            </select>
        </div>
        @Raw(ViewBag.DataContext.AddSelectField<Device, Company>("CompanyID", "ID", "Name", "Company"))
        <div class="checkbox">
            <label><input type="checkbox" data-bind="checked: Enabled, attr: {'disabled': ($root.recordMode()===RecordMode.View ? true : undefined)}"> Enabled</label>
        </div>
    </div>
    <div class="col-md-12">
        Connection string: <em data-bind="text: ConnectionString"></em>
    </div>
}
@Include("PagedViewModel.cshtml")
@section Scripts {
    @Raw(ViewBag.PageControlScripts.ToString())
    <script>
        function defaultConnectionString() {
            const dictionary = new Dictionary();

            // Define bindable connection string keys for a device record
            dictionary.setValue("connectionUserName", "");
            dictionary.setValue("connectionPassword", "");
            dictionary.setValue("useDialUp", false);
            dictionary.setValue("dialUpNumber", "");
            dictionary.setValue("maxConnectionRetries", 0);

            return dictionary;
        }

        // Configure view model
        viewModel.defaultSortField = "ID";
        viewModel.labelField = "Acronym";
        viewModel.primaryKeyFields = ["ID"];
        viewModel.initialFocusField = "inputAcronym";

        viewModel.connectionString = new ko.observableDictionary(defaultConnectionString()._values);

        ko.watch(viewModel.connectionString, { depth: -1 }, function () {
            viewModel.setDirtyFlag();
            const updates = defaultConnectionString();
            updates.pushAll(viewModel.connectionString.toJSON());
            viewModel.currentRecord().ConnectionString(updates.joinKeyValuePairs());
        });

        viewModel.setQueryRecordCount(function() {
            return dataHub.queryDeviceCount();
        });

        viewModel.setQueryRecords(function(sortField, ascending, page, pageSize) {
            return dataHub.queryDevices(sortField, ascending, page, pageSize);
        });

        viewModel.setDeleteRecord(function(keyValues) {
            return dataHub.deleteDevice(keyValues[0]);
        });

        viewModel.setNewRecord(function() {
            return dataHub.newDevice();
        });

        viewModel.setAddNewRecord(function(record) {
            return dataHub.addNewDevice(record);
        });

        viewModel.setUpdateRecord(function(record) {
            return dataHub.updateDevice(record);
        });

        $(window).on("currentRecordChanged", function(event) {
            // New current record selected, parse key/value pairs of connection string into an observable model
            viewModel.connectionString.removeAll();
            viewModel.connectionString.pushAll(defaultConnectionString()._values);
            viewModel.connectionString.pushAll(notNull(viewModel.currentRecord().ConnectionString()).parseKeyValuePairs()._values);
            viewModel.setDirtyFlag(false);
        });
    </script>
}