@*******************************************************************************************************
//  Devices.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may
//  not use this file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  01/15/2016 - J. Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using System.Text
@using openMIC.Model
@using RazorEngine.Templating
@inherits TemplateBase<AppModel>
@section StyleSheets {
    <style>
        html, body {
            height: 100%;
        }
    </style>
}
@{
    Layout = "Layout.cshtml";
    ViewBag.Title = "Devices";
    ViewBag.PageControlScripts = new StringBuilder();

    ViewBag.HeaderColumns = new[]
    {   //    { "Field", "Label", "Classes" }
        new[] { "Acronym", "Acronym", "text-left" },
        new[] { null, "Schedule", "text-center valign-middle" },
        new[] { "Enabled", "Enabled", "text-center" }
    };

    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog().ToString();
}
@helper BodyRows() {
    <td width="70%" class="text-left valign-middle" data-bind="text: Acronym"></td>
    <td width="20%" class="text-center"><button type="button" class="btn btn-link"><u>Undefined</u></button></td>
    <td width="5%" class="text-center valign-middle"><input type="checkbox" data-bind="checked: Enabled" /></td>
    <td width="5%" class="text-center valign-middle" nowrap>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.editPageRecord" hub-dependent><span class="glyphicon glyphicon-pencil"></span></button>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.removePageRecord" hub-dependent><span class="glyphicon glyphicon-remove"></span></button>
    </td>
}
@helper AddNewEditDialog() {
    <div class="col-md-6">
        <div class="form-group" data-bind="css: {'has-error': isEmpty(Acronym()), 'has-feedback': isEmpty(Acronym())}">
            <label for="acronym">Device Acronym:</label>
            <input type="text" class="form-control" data-bind="textInput: Acronym" id="acronym" required>
            <span class="glyphicon glyphicon-remove form-control-feedback" data-bind="visible: isEmpty(Acronym())"></span>
        </div>
        <div class="form-group">
            <label for="connectionUserName">Connection User Name:</label>
            <input type="text" class="form-control" data-bind="textInput: $root.connectionString.connectionusername" id="connectionUserName">
        </div>
        <div class="form-group">
            <label for="connectionPassword">Connection Password:</label>
            <input type="password" class="form-control" data-bind="textInput: $root.connectionString.connectionpassword" id="connectionPassword">
        </div>
        <div class="checkbox">
            <label><input type="checkbox" id="useDialUp"> Use Dial-up Connection</label>
        </div>
        <div class="form-group" data-bind="visible: $('#useDialUp').is(':checked')">
            <label for="dialUpPhoneNumber">Dial-up Phone Number:</label>
            <input type="tel" class="form-control" id="dialUpPhoneNumber">
        </div>
        <div class="form-group">
            <label for="maxConnectionRetries">Maximum Connection Retries:</label>
            <input type="number" class="form-control" id="maxConnectionRetries" value="3">
        </div>
    </div>
    <div class="col-md-6">
        <div class="form-group">
            <label for="connectionProfile">Connection Profile:</label>
            <select class="form-control" id="connectionProfile">
                @foreach (Vendor vendor in ViewBag.DataContext.QueryRecords<Vendor>("SELECT ID, Acronym From Vendor")) {
                    <option value="@vendor.ID">@vendor.Acronym</option>
                }
            </select>
        </div>
        <div class="checkbox">
            <label><input type="checkbox" data-bind="checked: Enabled"> Enabled</label>
        </div>
    </div>
    <div class="col-md-12">
        <span class="label label-default" data-bind="text: ConnectionString"></span>
    </div>
}
@Include("PagedViewModel.cshtml")
@section Scripts {
    @Raw(ViewBag.PageControlScripts.ToString())
    <script>
        // Configure view model
        viewModel.defaultSortField = "ID";
        viewModel.labelField = "Acronym";
        viewModel.identityField = "ID";

        // Defined connection string for current record
        viewModel.connectionString = [];

        viewModel.setQueryRecordCount(function() {
            return dataHub.queryDeviceCount();
        });

        viewModel.setQueryRecords(function(sortField, ascending, page, pageSize) {
            return dataHub.queryDevices(sortField, ascending, page, pageSize);
        });

        viewModel.setDeleteRecord(function(id) {
            return dataHub.deleteDevice(id);
        });

        viewModel.setNewRecord(function() {
            return dataHub.newDevice();
        });

        viewModel.setAddNewRecord(function (record) {
            record.ConnectionString = Dictionary.fromObservableModel(viewModel.connectionString).joinKeyValuePairs();
            return dataHub.addNewDevice(record);
        });

        viewModel.setUpdateRecord(function(record) {
            record.ConnectionString = Dictionary.fromObservableModel(viewModel.connectionString).joinKeyValuePairs();
            return dataHub.updateDevice(record);
        });

        $(document).ready(function() {
            $("#addNewEditDialog").on('shown.bs.modal', function() {
                $("#acronym").focus();
            });
        });

        $(window).on("currentRecordChanged", function (event) {
            viewModel.connectionString = notNull(viewModel.currentRecord().ConnectionString()).parseKeyValuePairs().toObservableModel();
        });
    </script>
}