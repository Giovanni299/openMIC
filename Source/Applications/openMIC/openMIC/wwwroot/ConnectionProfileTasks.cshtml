@*******************************************************************************************************
//  ConnectionProfileTasks.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may
//  not use this file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  01/15/2016 - J. Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using System
@using System.Collections.Generic
@using System.Net.Http
@using System.Text
@using GSF
@using GSF.Identity
@using GSF.Web
@using GSF.Web.Model
@using openMIC
@using openMIC.Model
@using RazorEngine.Templating
@inherits TemplateBase<AppModel>
@section StyleSheets {
    <link href="Content/Popup.css" rel="stylesheet">
}
@{
    DataContext dataContext = ViewBag.DataContext;
    HttpRequestMessage request = ViewBag.Request;
    Dictionary<string, string> parameters = request.QueryParameters();
    int parentID = int.Parse(parameters["ID"]);

    Layout = "Layout.cshtml";
    ViewBag.ShowMenu = false;
    ViewBag.Title = parameters["Name"] + " Tasks";
    ViewBag.PageControlScripts = new StringBuilder();

    ViewBag.HeaderColumns = new[]
    {   //    { "Field", "Label", "Classes" }
        new[] { "Name", "Name", "text-left" },
        new[] { null, "File Extensions", "text-center valign-middle" },
    };

    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog(dataContext).ToString();
}
@helper BodyRows()
{
    <td width="35%" class="text-left valign-middle"><button type="button" class="btn btn-link" data-bind="text: Name, click: $parent.viewPageRecord"></button></td>
    <td width="60%" class="text-center"><div data-bind="text: $($element.parentElement).truncateToWidth(notNull(Settings).parseKeyValuePairs().get('fileextensions'), 2)"></div></td>
    <td width="5%" class="text-center valign-middle" nowrap>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.editPageRecord, enable: $parent.dataHubIsConnected"><span class="glyphicon glyphicon-pencil"></span></button>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.removePageRecord, enable: $parent.dataHubIsConnected"><span class="glyphicon glyphicon-remove"></span></button>
    </td>
}
@helper AddNewEditDialog(DataContext dataContext)
{
    <div class="col-md-6">
        @Raw(dataContext.AddInputField<ConnectionProfileTask>("Name"))
        @Raw(dataContext.AddInputField("get('fileextensions')", true, fieldLabel: "File Names or Extensions to Download", fieldID: "inputFileExtensions", groupDataBinding: "with: $root.connectionString", toolTip: "Separate multiple file names or extension patterns with commas", enableHotLinks: false))
        @Raw(dataContext.AddInputField("get('remotepath')", true, fieldLabel: "Remote Path", fieldID: "inputRemotePath", groupDataBinding: "with: $root.connectionString", enableHotLinks: false))
        @Raw(dataContext.AddInputField("get('localpath')", true, fieldLabel: "Local Path", fieldID: "inputLocalPath", groupDataBinding: "with: $root.connectionString", toolTip: string.Format("User \"{0}\" will need rights to this folder or local path authentication will need to be specified >>", UserInfo.CurrentUserID).HtmlEncode(), enableHotLinks: false))
        <div class="checkbox" data-bind="with: $root.connectionString">
            <label><input type="checkbox" data-bind="checked: get('deleteremotefilesafterdownload'), attr: {'disabled': ($root.recordMode()===RecordMode.View ? true : undefined)}"> Delete remote files after download</label>
        </div>
        <div class="checkbox" data-bind="with: $root.connectionString">
            <label><input type="checkbox" data-bind="checked: get('limitremotefiledownloadbyage'), attr: {'disabled': ($root.recordMode()===RecordMode.View ? true : undefined)}"> Limit remote file download by age (@Model.Global.MaxRemoteFileAge days)</label>
        </div>
        <div class="checkbox" data-bind="with: $root.connectionString">
            <label><input type="checkbox" data-bind="checked: get('deleteoldlocalfiles'), attr: {'disabled': ($root.recordMode()===RecordMode.View ? true : undefined)}"> Delete old local files after @Model.Global.MaxLocalFileAge days</label>
        </div>
        <div class="checkbox" data-bind="with: $root.connectionString">
            <label><input type="checkbox" data-bind="checked: get('overwriteexistinglocalfiles'), attr: {'disabled': ($root.recordMode()===RecordMode.View ? true : undefined)}"> Overwrite existing local files</label>
        </div>
        <div class="checkbox" data-bind="with: $root.connectionString">
            <label><input type="checkbox" data-bind="checked: get('archivelocalfilesbeforeoverwrite'), attr: {'disabled': ($root.recordMode()===RecordMode.View ? true : undefined)}"> Archive local files before overwrite</label>
        </div>
    </div>
    <div class="col-md-6">
        @Raw(dataContext.AddInputField("get('externaloperation')", false, fieldLabel: "External operation application", fieldID: "inputExternalOperation", groupDataBinding: "with: $root.connectionString", toolTip: "External operation application will be provided connection profile task ID for parameter lookup", enableHotLinks: false))
        @Raw(dataContext.AddInputField("get('maximumfilesize')", false, inputType: "number", fieldLabel: "Maximum File Size to Download (MB)", fieldID: "inputMaximumFileSize", groupDataBinding: "with: $root.connectionString", enableHotLinks: false))
        @Raw(dataContext.AddInputField("get('maximumfilecount')", false, inputType: "number", fieldLabel: "Maximum Files to Download (-1 = no limit)", fieldID: "inputMaximumFileCount", groupDataBinding: "with: $root.connectionString", enableHotLinks: false))        
        @Raw(dataContext.AddInputField("get('directorynamingexpression')", false, inputType: "text", fieldLabel: "Directory Naming Expression", fieldID: "inputDirectoryNamingExpression", groupDataBinding: "with: $root.connectionString", toolTip: "Available template fields include year as <YYYY> or <YY>, month as <MM>, day as <DD>, device name as <DeviceName>, device acronym as <DeviceAcronym>, device folder name as <DeviceFolderName> and connection profile name as <ProfileName>", enableHotLinks: false))
        @Raw(dataContext.AddInputField("get('directoryauthusername')", false, fieldLabel: "Local Path Authentication User Name", fieldID: "inputDirectoryAuthUserName", groupDataBinding: "with: $root.connectionString", enableHotLinks: false))
        @Raw(dataContext.AddInputField("get('directoryauthpassword')", false, inputType: "password", fieldLabel: "Local Path Authentication Password", fieldID: "inputDirectoryAuthPassword", groupDataBinding: "with: $root.connectionString", enableHotLinks: false))
    </div>
    <div class="col-md-12">
        <div class="form-group">
            <label for="textConnectionString">Task Settings:</label>
            <textarea class="form-control" rows="2" data-bind="text: Settings" id="textConnectionString" readonly></textarea>
        </div>
    </div>
}
@Include("PagedViewModel.cshtml")
@section Scripts {
    @Raw(ViewBag.PageControlScripts.ToString())
    <script>
        "use strict";

        @Raw(dataContext.RenderViewModelConfiguration<ConnectionProfileTask, DataHub>(ViewBag, "Name", null, parentID))

        // Define default connection string keys needed for binding
        const defaultConnectionString = new Dictionary();

        defaultConnectionString.set("fileExtensions", "*.*");
        defaultConnectionString.set("remotePath", "@Raw(Model.Global.DefaultRemotePath.JavaScriptEncode())");
        defaultConnectionString.set("localPath", "@Raw(Model.Global.DefaultLocalPath.JavaScriptEncode())");
        defaultConnectionString.set("deleteRemoteFilesAfterDownload", false);
        defaultConnectionString.set("limitRemoteFileDownloadByAge", false);
        defaultConnectionString.set("deleteOldLocalFiles", false);
        defaultConnectionString.set("overwriteExistingLocalFiles", false);
        defaultConnectionString.set("archiveLocalFilesBeforeOverwrite", false);
        defaultConnectionString.set("externalOperation", "");
        defaultConnectionString.set("maximumFileSize", 1000);
        defaultConnectionString.set("maximumFileCount", -1);
        defaultConnectionString.set("directoryNamingExpression", "<YYYY><MM>\\<DeviceFolderName>");
        defaultConnectionString.set("directoryAuthUserName", "");
        defaultConnectionString.set("directoryAuthPassword", "");

        // Create an observable key/value pair connection string dictionary
        viewModel.connectionString = defaultConnectionString.toObservableDictionary(true);
        viewModel.loadingConnectionString = false;

        // Watch the connection string dictionary for changes independent of current record
        ko.watch(viewModel.connectionString, { depth: -1 }, function() {
            if (viewModel.loadingConnectionString)
                return;

            // Update connection string applying camel-case key names as defined in default connection string
            const updates = new Dictionary(defaultConnectionString);
            updates.pushAll(viewModel.connectionString.toJSON());
            viewModel.currentRecord().Settings(updates.joinKeyValuePairs());
        });

        $(viewModel).on("beforeEdit", function(event, observableRecord) {
            // Add connection string reference to current observable record so it can participate in the validation group
            observableRecord._connectionstring = viewModel.connectionString;

            // Initialize selected connection profile ID
            observableRecord.ConnectionProfileID(@parentID);
        });

        $(viewModel).on("beforeSave", function (event, observableRecord) {
            // Remove added connection string reference before serialization
            delete observableRecord._connectionstring;
        });

        $(viewModel).on("currentRecordChanged", function(event) {
            viewModel.loadingConnectionString = true;

            // Reset observable dictionary to default values on record change
            const keys = viewModel.connectionString.keys();

            for (let i = 0; i < keys.length; i++) {
                const key = keys[i];

                if (defaultConnectionString.containsKey(key))
                    viewModel.connectionString.set(key, defaultConnectionString.get(key));
                else
                    viewModel.connectionString.remove(key);
            }

            // Update observable dictionary with parsed key/value pairs of current connection string
            const currentConnectionString = notNull(viewModel.currentRecord().Settings()).parseKeyValuePairs();
            currentConnectionString.updateObservableDictionary(viewModel.connectionString, true);

            viewModel.isDirty(false);
            viewModel.loadingConnectionString = false;
        });

        $(viewModel).on("recordSaved", function (event, record, isNew) {
            if (!hubIsConnected)
                return;

            // Notify downloaders of a change in the connection profile tasks
            serviceHub.sendCommand("reloadconfig");
        });

        $(function() {
            $("#addNewEditDialog").on("shown.bs.modal", function () {
                // On add/edit dialog shown, disable data-dismiss buttons on parent pop-up
                const dismissButtons = $("#editTasksDialog", window.parent.document).find("button[data-dismiss]");
                dismissButtons.prop("disabled", true);
                dismissButtons.invisible();
            });

            $("#addNewEditDialog").on("hidden.bs.modal", function () {
                // On add/edit dialog hidden, re-enable data-dismiss buttons on parent pop-up
                const dismissButtons = $("#editTasksDialog", window.parent.document).find("button[data-dismiss]");
                dismissButtons.visible();
                dismissButtons.prop("disabled", false);
            });
        });
    </script>
}