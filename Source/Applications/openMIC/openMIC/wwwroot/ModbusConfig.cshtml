@*******************************************************************************************************
//  ModbusConfig.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  07/08/2016 - J. Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using openMIC.Model
@using RazorEngine.Templating
@inherits TemplateBase<AppModel>
@{
    Layout = "Layout.cshtml";

    const string ReadSequencePanelType = "panel-success";
    const string WriteSequencePanelType = "panel-warning";
}
@section StyleSheets {
    <style>
        /* Show move cursor over sequence panels to indicate drag-drop re-order capability */
        #sequencePanels .panel-heading {
            cursor: move;
            padding-top: 5px;
        }

        form.form-inline-sequence {
            cursor: move;
        }

        form.form-inline-sequence div label {
            cursor: move;
        }

        a.move-sequence-up {
            cursor: pointer;
            position: absolute;
            z-index: 999;
        }

        a.move-sequence-up span {
            cursor: pointer;
            color: darkgray;
            font-weight: bold;
            font-size: 12pt;
            margin-left: 3px;
            top: -12px;
        }

        a.move-sequence-up:hover span {
            color: #0000EE;
        }

        a.move-sequence-down {
            cursor: pointer;
            position: absolute;
            z-index: 999;
        }

        a.move-sequence-down span {
            cursor: pointer;
            color: darkgray;
            font-weight: bold;
            font-size: 12pt;
            margin-left: 3px;
            top: 1px;
        }

        a.move-sequence-down:hover span {
            color: #0000EE;
        }

        @@supports (-ms-accelerator:true) {
            /* Handle adjustments for Microsoft Edge */
            a.move-sequence-up span {
                margin-left: 2px;
            }

            a.move-sequence-down span {
                margin-left: -135px;
                top: 20px;
            }
        }

        @@media all and (-ms-high-contrast:none)
        {
            /* Handle adjustments for IE 11 */
            a.move-sequence-up span {
                margin-left: 2px;
            }

            a.move-sequence-down span {
                margin-left: -139px;
                top: 20px;
            }
        }

        span.sequence-record-count {
            color: darkgray;
            font-size: 7pt;
            position: absolute;
        }

        @@media screen {
            .sequence-name {
                margin-left: 30px;
                width: calc(100% - 30px);
                width: -o-calc(100% - 30px);
                width: -webkit-calc(100% - 30px);
                width: -moz-calc(100% - 30px);
            }

            span.sequence-record-count {
                margin-top: -15px;
            }

            span.sequence-record-count span {
                margin-left: 155px;
            }
        }

        @@media screen and (min-width: 768px) {
            .sequence-name {
                margin-left: 5px;
                width: 100%;
            }

            span.sequence-record-count {
                margin-top: 3px;
            }

            span.sequence-record-count span {
                margin-left: 45px;
            }
        }
        
        @@supports (-ms-accelerator:true)
        {
            /* Handle adjustments for Microsoft Edge */
            span.sequence-record-count {
                margin-top: 3px;
            }

            span.sequence-record-count span {
                margin-left: 15px;
            }
        }

        @@supports (-ms-accelerator:true) and (min-width: 768px)
        {
            /* Handle adjustments for Microsoft Edge */
            span.sequence-record-count {
                margin-top: 21px;
            }

            span.sequence-record-count span {
                margin-left: -95px;
            }
        }

        @@media all and (-ms-high-contrast:none)
        {
            /* Handle adjustments for IE 11 */
            span.sequence-record-count {
                margin-top: 3px;
            }

            span.sequence-record-count span {
                margin-left: 15px;
            }
        }

        @@media all and (-ms-high-contrast:none) and (min-width: 768px)
        {
            /* Handle adjustments for IE 11 */
            span.sequence-record-count {
                margin-top: 21px;
            }

            span.sequence-record-count span {
                margin-left: -95px;
            }
        }

        .panel {
            margin-top: 5px;
            margin-bottom: 5px;
        }

        .panel-body.warning-border {
            border-color: yellow;
            border-style: solid;
        }

        div.warning-message {
            font-size: 10pt;
            font-style: italic;
            font-weight: bold;
            text-align: center;
            text-shadow: 1px 1px lightgray;
            margin-top: -6px;
            margin-bottom: 5px;
        }

        .form-group {
            padding-top: 5px;
        }

        .top-padding {
            padding-top: 5px;
        }

        .top-margin {
            margin-top: 5px;
        }

        .connection-status {
            background-color: black;
            padding: 10px;
            margin: 0;
            overflow: auto;
        }

        .glyphicon-interpret-type {
            color: darkgrey;
            vertical-align: middle;
            font-size: 15pt;
            margin-right: -5px;
            margin-left: -5px;
        }

        .glyphicon-interpret-result {
            color: darkgrey;
            vertical-align: middle;
            font-size: 17pt;
        }

        .glyphicon-delete-sequence {
            vertical-align: text-top;
            color: red;
            font-size: larger;
        }

        .glyphicon-action-button {
            color: #606060;
            vertical-align: text-top;
        }

        /*.model-index {
            color: lightgray;
            font-size: 7pt;
            position: relative;
            top: -24px;
            right: -8px;
            margin-left: -8px;
            height: 5px;
            float: right !important;
            opacity: 0.5;
        }*/

        /* Collapsable button style */
        .btn-collapsable.btn {
            color: #606060;
            font-family: "Glyphicons Halflings";
            font-size: 8pt;
            position: relative;
            top: -9px;
            right: -14px;
            padding: 0 2px 2px 2px;
            height: 18px;
            float: right !important;
        }

        /* Collapsable button icon when content is shown - arrow down */
        .btn-collapsable.btn:after {
            content: "\e114";
        }

        /* Collapsable button icon when content is hidden - arrow right */
        .btn-collapsable.btn.collapsed:after {
            content: "\e080";
        }
    </style>
    <!--[if IE]>
    <style type="text/css">
        /* Handle adjustments for older IE versions */
        a.move-sequence-up span {
            margin-left: 2px;
        }

        a.move-sequence-down span {
            margin-left: -139px;
            top: 20px;
        }

        @@media screen
        {
            span.sequence-record-count {
                margin-top: 3px;
            }

            span.sequence-record-count span {
                margin-left: 15px;
            }
        }

        @@media screen and (min-width: 768px)
        {
            span.sequence-record-count {
                margin-top: 21px;
            }

            span.sequence-record-count span {
                margin-left: -95px;
            }
        }
    </style>
    <![endif]-->
}
@section Scripts {
    <script src="Scripts/knockout-3.4.0.js"></script>
    <script src="Scripts/knockout.mapping-latest.js"></script>
    <script src="Scripts/ko-reactor.min.js"></script>
    <script src="Scripts/knockout.validation.js"></script>
    <script id="validationMessageTemplate" type="text/html"><!--
        --><em class="validationPrompt" data-bind="validationMessage: field"></em>
    </script>
    <script>
        "use strict";

        // *** Sequence View Models ***

        var sequenceDomIndex = 0;

        var SequenceType = {
            Read: 0,
            Write: 1
        }

        var RecordType = {
            DiscreteInput: 0,
            Coil: 1,
            InputRegister: 2,
            HoldingRegister: 3,
            DerivedValue: 4
        }

        function getRecordTypeCode(recordType) {
            switch (recordType) {
                case RecordType.DiscreteInput:
                    return "DI";
                case RecordType.Coil:
                    return "CO";
                case RecordType.InputRegister:
                    return "IR";
                case RecordType.HoldingRegister:
                    return "HR";
                case RecordType.DerivedValue:
                    return "DV";
                default:
                    return "??";
            }
        }

        // Define view model for sequences
        function SequenceViewModel(sequenceType, domIndex, index) {
            const self = this;

            // Configuration fields
            self.sequenceType = sequenceType;
            self.domIndex = domIndex;

            // Observable fields
            self.index = ko.observable(index);
            self.sequenceName = ko.observable();
            self.sequenceRecords = ko.observableArray(); // Fields: recordType, selected, address, description, dataValue
            self.expanded = ko.observable(true);

            // Properties
            self.selectedRecordCount = ko.pureComputed({
                read: function() {
                    const records = self.sequenceRecords();
                    var selectedCount = 0;

                    if (records) {
                        for (let i = 0; i < records.length; i++) {
                            if (records[i].selected())
                                selectedCount++;
                        }
                    }

                    return selectedCount;
                },
                owner: self
            }).extend({ notify: "always" });

            self.canAddDerivedValue = ko.pureComputed({
                read: function() {
                    return self.selectedRecordCount() > 0 && $("input[name=interpretAs" + self.domIndex + "]:checked").length > 0;
                },
                owner: self
            });

            self.sequenceTypeDescription = ko.pureComputed({
                read: function() {
                    return self.sequenceType === SequenceType.Read ? "Read" : "Write";
                },
                owner: self
            });

            // Methods
            self.addNewSequenceRecord = function(recordType, sequenceRecord) {
                const records = self.sequenceRecords();
                var address = "";

                if (!sequenceRecord && records && records.length > 0) {
                    let lastAddress = null;

                    for (let i = records.length - 1; i >= 0; i--) {
                        if (records[i].recordType() === recordType) {
                            lastAddress = records[i].address();
                            break;
                        }
                    }                    

                    if (isNumber(lastAddress))
                        address = parseInt(lastAddress) + 1;
                }

                var observableRecord;

                if (sequenceRecord) {
                    observableRecord = ko.mapping.fromJS(sequenceRecord);
                } else {
                    observableRecord = ko.mapping.fromJS({
                        recordType: recordType,
                        selected: false,
                        address: address,
                        description: "",
                        dataValue: ""
                    });
                }

                observableRecord.address.extend({ required: true });
                
                if (observableRecord.recordType() !== RecordType.DerivedValue )
                    observableRecord.address.extend({ number: true });

                self.sequenceRecords.push(observableRecord);

                // Keep sequence map sorted by record type, then address
                self.sequenceRecords.sort(function (a, b) {
                    const firstOrderSort = a.recordType() - b.recordType();

                    if (firstOrderSort !== 0)
                        return firstOrderSort;

                    var addra = a.address();
                    var addrb = b.address();

                    if (isEmpty(addra))
                        addra = 0;

                    if (isEmpty(addrb))
                        addrb = 0;

                    if (isNumber(addra) && isNumber(addrb))
                        return parseInt(addra) - parseInt(addrb);

                    addra = addra.toUpperCase();
                    addrb = addrb.toUpperCase();

                    return addra < addrb ? -1 : (addra > addrb ? 1 : 0);
                });

                // Make sure sequence is expanded when adding a record
                $("#sequenceContent" + domIndex).collapse("show");
            }

            self.removeSequenceRecord = function(record) {
                self.sequenceRecords.remove(record);
            }

            self.clearInterpretAsSelection = function() {
                $("input[name=interpretAs" + self.domIndex + "]").prop("checked", false);
            }

            self.interpretAsSelectionChanged = function() {
                self.sequenceRecords.valueHasMutated();
            }

            self.selectNone = function() {
                const records = self.sequenceRecords();

                if (records) {
                    for (let i = 0; i < records.length; i++)
                        records[i].selected(false);
                }
            }

            self.selectOne = function(index) {
                const records = self.sequenceRecords();

                if (records) {
                    for (let i = 0; i < records.length; i++)
                        records[i].selected(i === index);
                }
            }

            self.serializeSequence = function() {
                var records = [];

                // Only serializing recordType, address, description and dataValue
                self.sequenceRecords().forEach(function(record) {
                    records.push({
                        recordType: record.recordType(),
                        address: record.address().toString(),
                        description: record.description(),
                        dataValue: record.dataValue()
                    });
                });

                return {
                    type: self.sequenceType,
                    name: self.sequenceName(),
                    records: records
                };
            }
        }

        function addSequenceRecord(sequence, recordType) {
            if (recordType === RecordType.DerivedValue) {
                sequence.addNewSequenceRecord(null, {
                    recordType: recordType,
                    selected: false,
                    address: getDerivedValueAddressExpression(sequence),
                    description: "",
                    dataValue: ""
                });
            } else {
                sequence.addNewSequenceRecord(recordType, null);
            }
        }

        function MapViewModel() {
            const self = this;

            // Observable fields
            self.sequences = ko.observableArray();            
            self.transport = ko.observable("TCP");
            self.unitID = ko.observable(255).extend({ number: true }).extend({ min: 0 }).extend({ max: 255 });

            // Internal fields
            self._isDirty = ko.observable(false);
            self._frameFormat = ko.observable("TCP");
            self._connectionString = ko.observable("");

            // Properties
            self.isDirty = ko.pureComputed({
                read: self._isDirty,
                write: function(value) {
                    if (value === undefined)
                        value = true;

                    self._isDirty(value);
                },
                owner: self
            });

            self.frameFormat = ko.pureComputed({
                read: self._frameFormat,
                write: function(value) {
                    if (value === "TCP") {
                        if (self.transport() === "SERIAL")
                            self.transport("TCP");
                    }
                    else {
                        if (self.transport() !== "SERIAL")
                            self.transport("SERIAL");
                    }

                    self._frameFormat(value);
                },
                owner: self
            });

            self.connectionString = ko.pureComputed({
                read: function() {
                    const parameters = notNull(self._connectionString()).parseKeyValuePairs();
                    parameters.set("frameFormat", self.frameFormat());
                    parameters.set("transport", self.transport());
                    parameters.set("unitID", self.unitID());
                    self._connectionString(parameters.joinKeyValuePairs());
                    return self._connectionString();
                },
                write: function(value) {
                    self._connectionString(value);
                },
                owner: self
            });

            // Methods
            self.addNewSequence = function(sequenceType) {
                const domIndex = sequenceDomIndex;
                const sequence = new SequenceViewModel(sequenceType, domIndex, self.sequences().length);

                self.sequences.push(sequence);

                sequenceDomIndex++;

                return sequence;
            }

            self.removeSequence = function(sequence) {
                if (sequence.sequenceRecords().length === 0 || confirm("Are you sure you want to delete sequence \"" + sequence.sequenceName() + "\"?")) {
                    const sequences = self.sequences();
                    const index = sequences.indexOf(sequence);

                    if (index !== -1)
                        sequences.splice(index, 1);

                    // Fully rerender reorderable sequences when one is removed
                    self.sequences([]);
                    self.sequences(sequences);

                    reorderSequencePanels();
                }
            }

            self.newSequenceMap = function () {
                self.sequences([]);
                self.isDirty(false);
            }

            self.loadSequenceMap = function(fileBlob, appendMode) {
                var reader = new FileReader();

                reader.onload = function() {
                    const data = JSON.parse(reader.result);

                    if (!appendMode)
                        self.sequences([]);

                    data.sequences.forEach(function(parsedSequence) {
                        var sequence = self.addNewSequence(parsedSequence.type);
                        sequence.sequenceName(parsedSequence.name);

                        // Restore full field set, only a partial set gets serialized
                        parsedSequence.records.forEach(function(record) {
                            sequence.addNewSequenceRecord(null, {
                                recordType: record.recordType,
                                selected: false,
                                address: record.address,
                                description: record.description,
                                dataValue: record.dataValue
                            });
                        });
                    });

                    self.isDirty(appendMode);
                };

                reader.onloadend = function() {
                    if (reader.error && reader.error.message)
                        alert("Failed to load sequence file: " + reader.error.message);
                };

                reader.readAsText(fileBlob);
            }

            self.saveSequenceMap = function(fileName) {
                const data = "data:text/json;charset=utf-8," + encodeURIComponent(JSON.stringify(self.serializeMapping(), null, 4));
                const anchor = $("#saveMappingFileLink");

                if (typeof anchor[0].download != "undefined") {
                    anchor.attr("href", data);
                    anchor.attr("download", fileName);
                    anchor[0].click();
                } else {
                    window.open(data, "_blank", "");
                }

                self.isDirty(false);
            }

            self.serializeMapping = function() {
                const sequences = self.sequences();
                var serializedSequences = [];

                if (sequences) {
                    sequences.forEach(function(sequence) {
                        serializedSequences.push(sequence.serializeSequence());
                    });
                }

                return {
                    sequences: serializedSequences
                };
            }
        }

        const viewModel = new MapViewModel();

        function getSequence(domIndex) {
            const sequences = viewModel.sequences();

            for (var i = 0; i < sequences.length; i++) {
                const sequence = sequences[i];

                if (sequence.domIndex === domIndex)
                    return sequence;
            }

            return null;
        }

        function interpretAsSelectionChanged(domIndex) {
            const sequence = getSequence(domIndex);

            if (!sequence)
                return;

            // Notify sequence view model that interpret-as selection has changed
            sequence.interpretAsSelectionChanged();

            // Auto-interpret selected record values as type
            // TODO: Call data-hub function to interpret selected values
        }

        function selectedSequenceRecordsChanged(domIndex, selectedIndex) {
            const sequence = getSequence(domIndex);

            if (!sequence)
                return;

            // Clear any selected interpret-as option
            sequence.clearInterpretAsSelection();

            // Wait a moment for ko processing to complete before validating selections
            setTimeout(function() {
                const records = sequence.sequenceRecords();

                if (!records)
                    return;

                // Validate selected record types match
                let firstSelectedType = null;
                let recordTypesMatch = true;

                for (let i = 0; i < records.length; i++) {
                    if (records[i].selected()) {
                        if (firstSelectedType != null) {
                            if (firstSelectedType !== records[i].recordType()) {
                                recordTypesMatch = false;
                                break;
                            }
                        }
                        else {
                            firstSelectedType = records[i].recordType();
                        }
                    }
                }

                if (!recordTypesMatch) {
                    if (records[selectedIndex].selected())
                        sequence.selectOne(selectedIndex);
                    else
                        sequence.selectNone();
                }

                // Validate selected records are contiguous
                let lastSelectedIndex = null;
                let recordsAreContiguous = true;

                for (let i = 0; i < records.length; i++) {
                    if (records[i].selected()) {
                        if (lastSelectedIndex != null) {
                            if (i !== lastSelectedIndex + 1) {
                                recordsAreContiguous = false;
                                break;
                            }
                        }

                        lastSelectedIndex = i;
                    }
                }

                if (!recordsAreContiguous) {
                    if (records[selectedIndex].selected())
                        sequence.selectOne(selectedIndex);
                    else
                        sequence.selectNone();
                }
            }, 250);
        }

        function getDerivedValueAddressExpression(sequence) {
            const records = sequence.sequenceRecords();

            if (!records)
                return "";

            let address = $("input[name='interpretAs" + sequence.domIndex + "']:checked").parent().text();

            if (isEmpty(address))
                return "";

            address += "(";

            let count = 0;

            for (let i = 0; i < records.length; i++) {
                if (records[i].selected()) {
                    if (count > 0)
                        address += ",";

                    address += getRecordTypeCode(records[i].recordType());
                    address += records[i].address();
                    count++;
                }
            }

            address += ")";

            return address;
        }

        function postSequenceRendering(elements, sequence) {
            // Call reorder sequence panels after any rendering to make sure
            // model index always matches visible sequence ordering
            reorderSequencePanels();

            const collapsableSection = $(elements).find("div.collapse");

            if (!collapsableSection)
                return;

            // Track current expanded state such that upon any
            // re-render, expanded state is maintained
            collapsableSection.on("shown.bs.collapse", function() {
                sequence.expanded(true);
            });

            collapsableSection.on("hidden.bs.collapse", function() {
                sequence.expanded(false);
            });
        }

        // *** Sequence Reorder Handling ***

        function reorderSequencePanels(event, ui) {
            const sequencePanels = $("#sequencePanels");

            $(".panel", sequencePanels).each(function(index, elem) {
                const listItem = $(elem);
                const newIndex = listItem.index();
                const badges = listItem.find(".badge");

                if (badges.length > 0) {
                    // Update DOM section index
                    const indexBadge = $(badges[0]);
                    const oldIndex = parseInt(indexBadge.text()) - 1;

                    indexBadge.text(newIndex + 1);

                    // Update view model index
                    const sequence = viewModel.sequences()[oldIndex];

                    if (sequence)
                        sequence.index(newIndex);
                }
            });

            // Make sure view model is reordered to match user defined order
            viewModel.sequences().sort(function(a, b) {
                return a.index() - b.index();
            });
        }

        function moveSequenceUp(anchorElement) {
            const currentItem = $(anchorElement).parents("li");
            const index = currentItem.index();

            if (index < 1)
                return;

            currentItem.insertBefore($("#sequencePanels li:eq(" + (index - 1) + ")"));
            reorderSequencePanels();
        }

        function moveSequenceDown(anchorElement) {
            const currentItem = $(anchorElement).parents("li");
            const index = currentItem.index();

            if (index > $("#sequencePanels li").size() - 2)
                return;

            currentItem.insertAfter($("#sequencePanels li:eq(" + (index + 1) + ")"));
            reorderSequencePanels();
        }

        function expandAllSequences() {
            $("li.panel div.collapse").collapse("show");
        }

        function collapseAllSequences() {
            $("li.panel div.collapse").collapse("hide");
        }

        $(function() {
            ko.validation.rules.pattern.message = "Invalid";

            ko.validation.init({
                registerExtenders: true,
                messagesOnModified: true,
                insertMessages: true,
                parseInputAttributes: true,
                allowHtmlMessages: true,
                messageTemplate: null,
                grouping: { deep: true, observable: true, live: true }
            }, true);

            // Initialize primary view model
            ko.applyBindings(viewModel);

            ko.watch(viewModel.sequences, { depth: -1 }, function(parents, child, item) {
                viewModel.isDirty(true);
            });

            // Initialize jQuery based sequence reordering
            $("#sequencePanels").sortable({
                handle: ".panel-heading",
                update: reorderSequencePanels
            });

            // Setup save mapping file name dialog functionality
            $("#saveMappingFile").click(function() {
                $("#saveMappingFileNameDialog").hide();

                var fileName = $("#inputMappingFileName").val();

                if (!fileName.endsWith(".json"))
                    fileName += ".json";

                viewModel.saveSequenceMap(fileName);
            });

            // Make enter key auto-click save 
            $("#inputMappingFileName").keyup(function(event) {
                if (event.keyCode === 13)
                    $("#saveMappingFile").click();
            });

            // Auto-select all text on focus
            $("#inputMappingFileName").focus(function() {
                $(this).select();
            });

            // Prevent default form submission when user presses enter
            $("#saveMappingFileNameDialog").submit(function() {
                return false;
            });

            // Auto-hide pop-up form when user clicks outside form area
            $("#saveMappingFileNameDialog").focusout(function() {
                if (!$("#saveMappingFileNameDialog").is(":hover") && !$("#showSaveMappingFileNameDialog").is(":hover"))
                    $("#saveMappingFileNameDialog").hide();
            });

            dataHubClient.connectionStatusUpdate = function(message, color) {
                // Html encode message
                var encodedMessage = $("<div />").text(message).html();
                var connectionStatusWindow = $("#connectionStatusWindow");

                connectionStatusWindow.append("<span style='color: " + color + "'>" + encodedMessage + "</span>");

                if (connectionStatusWindow[0].childElementCount > 50)
                    connectionStatusWindow.find(":first-child").remove();

               scrollConnectionStatusWindowToBottom();
            }

            dataHubClient.attemptingConnection = function() {
                $("#notConnected").hide();
                $("#connected").hide();
                $("#attemptingConnection").show();
            }

            dataHubClient.connectionSucceeded = function() {
                $("#notConnected").hide();
                $("#attemptingConnection").hide();
                $("#connected").show();
            }

            dataHubClient.connectionFailed = function() {
                $("#attemptingConnection").hide();
                $("#connected").hide();
                $("#notConnected").show();
            }
        });

        function scrollConnectionStatusWindowToBottom() {
            const connectionStatusWindow = $("#connectionStatusWindow");
            connectionStatusWindow.scrollTop(connectionStatusWindow[0].scrollHeight);
        }

        $(window).resize(function() {
            scrollConnectionStatusWindowToBottom();
        });

        $(window).on("onMessageVisibiltyChanged", function(event) {
            scrollConnectionStatusWindowToBottom();
        });

        var loadAppendMode = false;

        function createNewMappingFile() {
            if (viewModel.isDirty() && !confirm("Are you sure you want to lose unsaved changes to current mapping?"))
                return;

            viewModel.newSequenceMap();
        }

        function loadMappingFile(event) {
            viewModel.loadSequenceMap(event.target.files[0], loadAppendMode);
            $("#loadMappingFileName").val("");
        }

        function showLoadMappingFileNameDialog(appendMode) {
            if (!appendMode && viewModel.isDirty() && !confirm("Are you sure you want to lose unsaved changes to current mapping?"))
                return;

            loadAppendMode = appendMode;
            $("#loadMappingFileName").trigger("click");
        }

        function showSaveMappingFileNameDialog() {
            $("#saveMappingFileNameDialog").toggle();

            if ($("#saveMappingFileNameDialog").is(":visible"))
                $("#inputMappingFileName").focus();
        }
    </script>
}
<h3>Modbus Configuration Map Builder</h3>
@* Connection Settings and Status Panel *@
<div class="panel panel-primary">
    <div class="panel-heading clearfix">
        <label>
            Modbus&nbsp;Device Connection&nbsp;Settings
        </label>
        <div class="pull-right">
            <span id="notConnected">Not&nbsp;Connected&nbsp;&nbsp;<span class="glyphicon glyphicon-ban-circle" style="color: #FF003B;"></span></span>&nbsp;&nbsp;
            <span id="attemptingConnection" style="display: none">Attempting&nbsp;Connection&nbsp;&nbsp;<span class="glyphicon glyphicon-refresh glyphicon-spin" style="color: yellow"></span></span>&nbsp;&nbsp;
            <span id="connected" style="display: none">Connected&nbsp;&nbsp;<span class="glyphicon glyphicon-check" style="color: chartreuse"></span></span>
            <button type="button" class="btn btn-xs btn-collapsable" data-toggle="collapse" data-target="#connectionSettings"></button>
        </div>
    </div>
    <div class="panel-body collapse in" id="connectionSettings">
        <form class="form-hortizontal" role="form">
            <div class="row">
                <div class="form-group">
                    <label class="col-md-2 control-label top-padding text-right text-nowrap" for="selectFrameFormat">Frame Format:</label>
                    <div class="col-md-2">
                        <select class="form-control" id="selectFrameFormat" data-bind="value: frameFormat">
                            <option value="RTU">RTU</option>
                            <option value="ASCII">ASCII</option>
                            <option value="TCP">TCP</option>
                        </select>
                    </div>
                    <label class="col-md-2 control-label top-padding text-right text-nowrap" for="selectTransport">Transport:</label>
                    <div class="col-md-2">
                        <select class="form-control" id="selectTransport" data-bind="value: transport">
                            <option value="TCP" data-bind="attr: { 'disabled': frameFormat() != 'TCP' }">TCP</option>
                            <option value="UDP" data-bind="attr: { 'disabled': frameFormat() != 'TCP' }">UDP</option>
                            <option value="SERIAL" data-bind="attr: { 'disabled': frameFormat() == 'TCP' }">Serial</option>
                        </select>
                    </div>
                    <label class="col-md-2 control-label top-padding text-right text-nowrap" for="inputUnitID">Unit ID:</label>
                    <div class="col-md-2">
                        <input type="number" class="form-control" id="inputUnitID" data-bind="textInput: unitID">
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="form-group">
                    <label class="col-md-2 control-label top-padding text-right text-nowrap" for="inputConnectionString">Connection String:</label>
                    <div class="col-md-10">
                        <div class="input-group">
                            <input type="text" class="form-control" id="inputConnectionString" data-bind="textInput: connectionString">
                            <span class="input-group-btn">
                                <button type="button" class="btn btn-default"><span class="glyphicon glyphicon-edit glyphicon-action-button"></span> Build...</button>
                            </span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="form-group">
                    <label class="col-md-2 control-label top-padding text-right text-nowrap" for="inputPollingRate">Polling Rate:</label>
                    <div class="col-md-2">
                        <div class="input-group">
                            <input type="number" class="form-control" placeholder="Polling rate..." id="inputPollingRate" value="2000">
                            <span class="input-group-addon">ms</span>
                        </div>
                    </div>
                    <label class="col-md-2 control-label text-right" for="inputInterSequenceDelay">Inter-Sequence Polling&nbsp;Delay:</label>
                    <div class="col-md-2">
                        <div class="input-group">
                            <input type="number" class="form-control" placeholder="Intersequence delay..." id="inputInterSequenceDelay" value="250">
                            <span class="input-group-addon">ms</span>
                        </div>
                    </div>
                    <div class="col-md-4 top-padding">
                        <button type="button" class="btn btn-primary pull-right"><strong>Connect</strong>&nbsp;</button>
                    </div>
                </div>
            </div>
        </form>
        <div class="panel panel-default">
            <div class="panel-heading" style="height: 30px; padding-top: 5px">
                <label>Connection&nbsp;Status</label>
                <button type="button" class="btn btn-xs btn-collapsable collapsed" style="top: 0; right: -10px" data-toggle="collapse" data-target="#connectionStatus"></button>
            </div>
            <div class="panel-body collapse" style="padding: 2px" id="connectionStatus">
                <pre id="connectionStatusWindow" class="small connection-status" style="height: 150px"><span style="color: white">Attempting connection...</span></pre>
            </div>
        </div>
    </div>
</div>
@* Primary Buttons Panel *@
<div class="panel panel-default">
    <div class="panel-body clearfix" style="padding-top: 5px; padding-bottom: 10px">
        <button type="button" class="btn btn-default top-margin" style="margin-left: -5px" title="Add New Modbus Read Sequence to Current Mapping" data-bind="click: addNewSequence.bind($data, SequenceType.Read)"><span class="glyphicon glyphicon-plus-sign glyphicon-action-button"></span> Read Sequence</button>
        <button type="button" class="btn btn-default top-margin" title="Add New Modbus Write Sequence to Current Mapping" data-bind="click: addNewSequence.bind($data, SequenceType.Write)"><span class="glyphicon glyphicon-plus-sign glyphicon-action-button"></span> Write Sequence</button>
        <div class="top-padding pull-right">
            <button type="button" class="btn btn-default" title="Create a New Modbus Sequence Mapping" onclick="createNewMappingFile()"><span class="glyphicon glyphicon-circle-arrow-down glyphicon-action-button"></span> New Mapping</button>
            <button type="button" class="btn btn-default" title="Load Existing Modbus Sequence Mapping" onclick="showLoadMappingFileNameDialog(false)"><span class="glyphicon glyphicon-floppy-open glyphicon-action-button"></span> Load Mapping</button>
            <input id="loadMappingFileName" type="file" accept="text/json" style="position: fixed; top: -100em" onchange="loadMappingFile(event)">
            <button type="button" class="btn btn-default" title="Save Current Modbus Sequence Mapping" onclick="showSaveMappingFileNameDialog()" id="showSaveMappingFileNameDialog" data-bind="enable: isDirty"><span class="glyphicon glyphicon-floppy-save glyphicon-action-button"></span> Save Mapping</button>
            <div class="well well-sm floating-form" id="saveMappingFileNameDialog" style="z-index: 1000">
                <form class="form-inline" role="form">
                    <div class="form-group form-group-sm">
                        <button type="button" class="close" onclick="$('#saveMappingFileNameDialog').hide()" style="margin-top: -13px; margin-left: 8px">&times;</button>
                        <label for="inputMappingFileName">Mapping file name:</label>
                        <div class="input-group">
                            <input type="text" class="form-control" id="inputMappingFileName" placeholder="File name..."/>
                            <span class="input-group-btn">
                                <button type="button" class="btn btn-default btn-sm" id="saveMappingFile" style="margin-right: -3px; font-weight: bold">Save</button>
                            </span>
                        </div>
                    </div>
                </form>
            </div>            
            <a href="#" id="saveMappingFileLink" target="_blank" style="display: none"></a>
            <button type="button" class="btn btn-default" style="margin-right: -5px" title="Load Modbus Sequence Mapping and Append to Current Mapping" onclick="showLoadMappingFileNameDialog(true)"><span class="glyphicon glyphicon-import glyphicon-action-button"></span> Append Mapping</button>
        </div>
    </div>
</div>
@* Reorderable Mapping Sequences Panel *@
<button type="button" class="btn btn-xs btn-collapsable" onclick="collapseAllSequences()" title="Collapse all sequences" style="top: 3px; right: 0"></button>
<button type="button" class="btn btn-xs btn-collapsable collapsed" onclick="expandAllSequences()" title="Expand all sequences" style="top: 3px; right: 2px; margin-left: 5px"></button>
<hr class="thick-spacer"/>
<ul id="sequencePanels" class="list-unstyled" data-bind="foreach: { data: sequences, afterRender: postSequenceRendering }">
    <li class="panel" data-bind="css: { '@ReadSequencePanelType': sequenceType === SequenceType.Read, '@WriteSequencePanelType': sequenceType === SequenceType.Write }">
        <div class="panel-heading clearfix">
            <form class="form-inline form-inline-sequence" role="form">
                <div class="form-group" data-bind="css: {'has-error': isEmpty(sequenceName()), 'has-feedback': isEmpty(sequenceName())}">
                    <label data-bind="attr: { 'for': 'sequenceName' + domIndex }">
                        <a class="move-sequence-up" title="Move Sequence Order Up" onclick="moveSequenceUp(this)"><span class="glyphicon glyphicon-menu-up"></span></a>
                        <span class="badge"></span>&nbsp;&nbsp;<span data-bind="text: sequenceTypeDescription"></span> Sequence:
                        <span class="sequence-record-count"><span data-bind="text: 'Record&nbsp;Count:&nbsp;' + sequenceRecords().length"></span></span>
                        <a class="move-sequence-down" title="Move Sequence Order Down" onclick="moveSequenceDown(this)"><span class="glyphicon glyphicon-menu-down"></span></a>
                    </label>
                    <input type="text" class="form-control sequence-name" style="padding-right: 0" placeholder="Sequence name..." data-bind="textInput: sequenceName, attr: { 'id': 'sequenceName' + domIndex }">
                </div>
                <div class="form-group pull-right">
                    <button type="button" class="btn btn-default" title="Add New Modbus Discrete Input Record to Sequence" data-bind="click: addSequenceRecord.bind($data, $data, RecordType.DiscreteInput), visible: sequenceType === SequenceType.Read"><span class="glyphicon glyphicon-plus-sign glyphicon-action-button"></span> Discrete Input</button>
                    <button type="button" class="btn btn-default" title="Add New Modbus Coil Record to Sequence" data-bind="click: addSequenceRecord.bind($data, $data, RecordType.Coil)"><span class="glyphicon glyphicon-plus-sign glyphicon-action-button"></span> Coil</button>
                    <button type="button" class="btn btn-default" title="Add New Modbus Input Register Record to Sequence" data-bind="click: addSequenceRecord.bind($data, $data, RecordType.InputRegister), visible: sequenceType === SequenceType.Read"><span class="glyphicon glyphicon-plus-sign glyphicon-action-button"></span> Input Register</button>
                    <button type="button" class="btn btn-default" title="Add New Modbus Holding Register Record to Sequence" data-bind="click: addSequenceRecord.bind($data, $data, RecordType.HoldingRegister)"><span class="glyphicon glyphicon-plus-sign glyphicon-action-button"></span> Holding Register</button>
                    &nbsp;
                    <button type="button" class="btn btn-default" style="margin-right: -10px" title="Delete Sequence" data-bind="click: $root.removeSequence.bind($data)"><span class="glyphicon glyphicon-remove-circle glyphicon-delete-sequence"></span></button>
                    <button type="button" class="btn btn-xs btn-collapsable" data-toggle="collapse" data-bind="css: { 'collapsed': !expanded() }, attr: { 'data-target': '#sequenceContent' + domIndex }"></button>
                    @*<span class="model-index" data-bind="text: index"></span>*@
                </div>
            </form>
        </div>
        <div class="collapse" data-bind="css: { 'in': expanded }, attr: { 'id': 'sequenceContent' + domIndex }">
            <div class="panel-body" data-bind="css: { 'warning-border': sequenceRecords().length > 100 }">
                <div class="warning-message" data-bind="visible: sequenceRecords().length > 100">Some Modbus devices may not respond to reading or writing more than 100 registers in a single sequence.</div>
                <div class="table-responsive">
                    <table class="table table-hover table-striped table-condensed">
                        <thead>
                        <tr>
                            <th style="text-align: center">Type</th>
                            <th data-bind="if: sequenceType === SequenceType.Read"></th>
                            <th>Address</th>
                            <th>Description</th>
                            <th data-bind="text: sequenceType === SequenceType.Read ? 'Current Value' : 'Value'"></th>
                            <th></th>
                        </tr>
                        </thead>
                        <tbody data-bind="foreach: sequenceRecords">
                        <tr>
                            <td style="text-align: center; vertical-align: middle" width="5%" data-bind="text: getRecordTypeCode(recordType())"></td>
                            <td style="text-align: center; vertical-align: middle" width="5%" data-bind="if: $parent.sequenceType === SequenceType.Read">
                                <input type="checkbox" data-bind="checked: selected, visible: recordType() === RecordType.InputRegister || recordType() === RecordType.HoldingRegister, enable: !isEmpty(address()), attr: { 'onclick': 'selectedSequenceRecordsChanged(' + $parent.domIndex + ', ' + $index() + ')' }">
                            </td>
                            <td width="20%">
                                <div class="form-group" style="padding: 0; margin: 0" data-bind="css: {'has-error': isEmpty(address()), 'has-feedback': isEmpty(address())}">
                                    <input class="form-control" data-bind="textInput: address, attr: { 'type': recordType() == RecordType.DerivedValue ? 'text' : 'number', 'placeholder': recordType() == RecordType.DerivedValue ? undefined : 'Number...' }" required>
                                    <span class="glyphicon glyphicon-remove form-control-feedback" data-bind="visible: isEmpty(address())"></span>
                                </div>
                            </td>
                            <td data-bind="attr: { 'width': $parent.sequenceType === SequenceType.Read ? '45%' : '50%' }">
                                <input type="text" class="form-control" placeholder="Description..." data-bind="textInput: description">
                            </td>
                            <td width="20%">
                                <span data-bind="if: $parent.sequenceType === SequenceType.Write"><input type="number" class="form-control" placeholder="New value..." data-bind="textInput: dataValue"></span>
                                <span data-bind="if: $parent.sequenceType === SequenceType.Read"><input type="number" class="form-control" data-bind="value: dataValue" readonly></span>
                            </td>
                            <td style="text-align: center" width="5%">
                                <button type="button" class="btn btn-default" title="Delete Sequence Record" data-bind="click: $parent.removeSequenceRecord"><span class="glyphicon glyphicon-remove-circle glyphicon-delete-sequence"></span></button>
                            </td>
                        </tr>
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="panel-footer" style="padding-top: 10px; padding-bottom: 1px" data-bind="if: sequenceType === SequenceType.Read">
                <span class="text-nowrap" style="margin-left: 5px; font-style: italic"><span data-bind="text: selectedRecordCount"></span> selected, interpret as:</span>
                <div class="form-group">
                    <span class="glyphicon glyphicon-menu-left glyphicon-interpret-type"></span>
                    <label class="radio-inline text-nowrap" data-bind="css: { disabled: selectedRecordCount() === 0 }"><input type="radio" data-bind="attr: { 'name': 'interpretAs' + domIndex, 'onclick': 'interpretAsSelectionChanged(' + domIndex + ')' }, enable: selectedRecordCount() > 0">String</label>
                    <label class="radio-inline text-nowrap" data-bind="css: { disabled: selectedRecordCount() !== 2 }"><input type="radio" data-bind="attr: { 'name': 'interpretAs' + domIndex, 'onclick': 'interpretAsSelectionChanged(' + domIndex + ')' }, enable: selectedRecordCount() === 2">Single</label>
                    <label class="radio-inline text-nowrap" data-bind="css: { disabled: selectedRecordCount() !== 4 }"><input type="radio" data-bind="attr: { 'name': 'interpretAs' + domIndex, 'onclick': 'interpretAsSelectionChanged(' + domIndex + ')' }, enable: selectedRecordCount() === 4">Double</label>
                    <label class="radio-inline text-nowrap" data-bind="css: { disabled: selectedRecordCount() !== 2 }"><input type="radio" data-bind="attr: { 'name': 'interpretAs' + domIndex, 'onclick': 'interpretAsSelectionChanged(' + domIndex + ')' }, enable: selectedRecordCount() === 2">Int32</label>
                    <label class="radio-inline text-nowrap" data-bind="css: { disabled: selectedRecordCount() !== 2 }"><input type="radio" data-bind="attr: { 'name': 'interpretAs' + domIndex, 'onclick': 'interpretAsSelectionChanged(' + domIndex + ')' }, enable: selectedRecordCount() === 2">UInt32</label>
                    <label class="radio-inline text-nowrap" data-bind="css: { disabled: selectedRecordCount() !== 4 }"><input type="radio" data-bind="attr: { 'name': 'interpretAs' + domIndex, 'onclick': 'interpretAsSelectionChanged(' + domIndex + ')' }, enable: selectedRecordCount() === 4">Int64</label>
                    <label class="radio-inline text-nowrap" data-bind="css: { disabled: selectedRecordCount() !== 4 }"><input type="radio" data-bind="attr: { 'name': 'interpretAs' + domIndex, 'onclick': 'interpretAsSelectionChanged(' + domIndex + ')' }, enable: selectedRecordCount() === 4">UInt64</label>
                    <span class="text-nowrap">
                        <span class="glyphicon glyphicon-menu-right glyphicon-interpret-type"></span>
                        <span class="glyphicon glyphicon-upload glyphicon-rotate-90 glyphicon-interpret-result"></span>
                    </span>
                    &nbsp;&nbsp;
                </div>
                <form class="form-inline form-inline-sequence" role="form">
                    <div class="form-group">
                        <input type="text" class="form-control" data-bind="value: getDerivedValueAddressExpression($data), attr: { 'name': 'derivedValueExpression' + domIndex }" />
                        <div class="input-group">
                            <input type="text" class="form-control" placeholder="Interpreted value..." readonly/>
                            <span class="input-group-btn">
                                <button type="button" class="btn btn-default" title="Add Derived Value as a New Record in Sequence" data-bind="click: addSequenceRecord.bind($data, $data, RecordType.DerivedValue), enable: canAddDerivedValue()"><span class="glyphicon glyphicon-plus-sign glyphicon-action-button"></span> Derived Value</button>
                            </span>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </li>
</ul>
@* JSON Sequences Display Panel *@
<hr class="thick-spacer" data-bind="visible: sequences().length > 0" />
<div class="panel panel-default">
    <div class="panel-heading" style="height: 30px; padding-top: 5px">
        <label>Serialized&nbsp;Sequences</label>
        <button type="button" class="btn btn-xs btn-collapsable collapsed" style="top: 0; right: -10px" data-toggle="collapse" data-target="#serializedSequences"></button>
    </div>
    <div class="panel-body collapse" style="padding: 2px; margin-bottom: -10px" id="serializedSequences">
        <pre data-bind="text: JSON.stringify(serializeMapping(), null, 4)"></pre>
    </div>
</div>