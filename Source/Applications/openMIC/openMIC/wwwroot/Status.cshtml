@*******************************************************************************************************
//  Status.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may
//  not use this file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  01/15/2016 - J. Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using GSF
@using GSF.Web.Model
@using openMIC.Model
@inherits ExtendedTemplateBase<AppModel>
@{
    Layout = "Layout.cshtml";
    ViewBag.Title = "Status";
}
@section StyleSheets {
    <style>
        html, body {
            height: 100%;
        }
    </style>
}
@helper SearchFilter()
{
    @* Make sure to use single quotes in this function: *@
    <div class='form-group' style='margin: 0'>
        <div class='right-inner-addon'>
            <i class='glyphicon glyphicon-search'></i>
            <input class='form-control' type='search' id='searchFilter' placeholder='Search'/>
        </div>
    </div>
    @*<div class='form-group' style='margin-top: 5px; margin-bottom: 10px'>
        <label for='inputQueryLimit'>Query Limit:</label> <input id='inputQueryLimit' data-bind='value: itemLimit' type='number' style='width: 50px'/>
        <button type='button' class='btn btn-primary pull-right' data-bind='click: queueAll()'>Queue All for Processing...</button>
    </div>*@
}
@section Scripts {
    <script src="Scripts/knockout-3.4.0.js"></script>
    <script>
        // Define view model for device status
        function StatusViewModel() {
            const self = this;

            // Configuration fields
            self.filterText = "";                       // Search filter text

            // Observable fields
            self.items = ko.observableArray();          // Items to display
            self.columnLength = ko.observable(4);       // Columns in each row of items

            // Internal fields
            self._itemLimit = ko.observable(-1);       // Item query limit

            // Properties

            // Gets record count
            self.recordCount = ko.pureComputed({
                read: function () {
                    return self.items().length;
                }
            });

            self.itemLimit = ko.pureComputed({
                read: self._itemLimit,
                write: function (value) {
                    if (value < 1)
                        value = 1;
                    
                    if (value != self._itemLimit()) {
                        self._itemLimit(value);
                        self.queryItems();
                    }
                }
            });

            // Return an array of rows where each row is an array of items
            self.rows = ko.computed(function () {
                const result = [];
                const columns = parseInt(self.columnLength(), 10);
                var row;

                for (var i = 0, j = self.items().length; i < j; i++) {
                    if (i % columns === 0) {
                        if (row)
                            result.push(row);

                        row = [];
                    }

                    if (row)
                        row.push(self.items()[i]);
                }

                // Push final row  
                if (row)
                    result.push(row);

                return result;
            });

            self.queryItems = function () {
                if (!hubIsConnected)
                    return;

                dataHub.queryEnabledDevices(self.itemLimit(), self.filterText).done(function (devices) {
                    self.items.removeAll();
                    self.items(devices);
                    
                    //$.each(devices, function (i, d) {
                    //    dataHub.getStatusLogForDevice(d.Acronym).done(function (data) {
                    //        $('#lastSuccessful' + d.Acronym).text(data.LastSuccess.formatDate(DateTimeFormat));
                    //        $('#lastUnsuccessful' + d.Acronym).text(data.LastFailure.formatDate(DateTimeFormat));
                    //        $('#lastMessage' + d.Acronym).text(data.Message);
                    //    });
                    //});

                });
            }
        }

        const viewModel = new StatusViewModel();

        const ProgressState = {
            Undefined: 0,
            Processing: 1,
            Skipped: 2,
            Succeeded: 3,
            Failed: 4
        };

        $(function() {
            dataHubClient.deviceProgressUpdate = function(update) {
                const messageWell = $("#" + update.DeviceName + "Message");

                if (notNull(update.ProgressMessage).length > 0)
                    messageWell.html($("<div />").text(update.ProgressMessage).html().replaceAll("\n", "<br />"));

                if (update.FilesDownloaded > 0)
                    $("#" + update.DeviceName + "Heading").text(update.DeviceName + ": " + update.FilesDownloaded.toLocaleString() + " Downloads");
                else
                    $("#" + update.DeviceName + "Heading").text(update.DeviceName + ": " + update.ValuesProcessed.toLocaleString() + " Processed Values");

                const progressBar = $("#" + update.DeviceName + (update.TargetIsOverall ? "Overall" : "Current") + "Progress");
                const progressValue = Math.ceil(update.ProgressComplete / update.ProgressTotal * 100.0);

                if (isNumber(progressValue)) {
                    progressBar.text(progressValue.toString() + "%");
                    progressBar.css("width", progressBar.text());
                }

                if (update.TargetIsOverall) {
                    const panel = $("#" + update.DeviceName + "Panel");
                    panel.removeClass("panel-default panel-info panel-success panel-warning panel-danger");

                    switch (update.State) {
                        case ProgressState.Undefined:
                            panel.addClass("panel-default");
                            break;
                        case ProgressState.Processing:
                            panel.addClass("panel-info");
                            break;
                        case ProgressState.Skipped:
                            panel.addClass("panel-warning");
                            break;
                        case ProgressState.Succeeded:
                            panel.addClass("panel-success");
                            break;
                        case ProgressState.Failed:
                            panel.addClass("panel-danger");
                            break;
                    }
                } else {
                    messageWell.removeClass("bg-success bg-info bg-warning bg-danger");

                    switch (update.State) {
                        case ProgressState.Processing:
                            messageWell.addClass("bg-info");
                            break;
                        case ProgressState.Skipped:
                            messageWell.addClass("bg-warning");
                            break;
                        case ProgressState.Succeeded:
                            messageWell.addClass("bg-success");
                            break;
                        case ProgressState.Failed:
                            messageWell.addClass("bg-danger");
                            break;
                    }
                }
                
                //dataHub.getStatusLogForDevice(update.DeviceName).done(function (data) {
                //    $('#lastSuccessful' + update.DeviceName).text(data.LastSuccess.formatDate(DateTimeFormat));
                //    $('#lastUnsuccessful' + update.DeviceName).text(data.LastFailure.formatDate(DateTimeFormat));
                //    $('#lastMessage' + update.DeviceName).text(data.Message);
                //});
            }

            $("#pageHeader").append("@Raw(SearchFilter().ToString().RemoveDuplicateWhiteSpace().Replace("\r\n", ""))");

            $("#titleText").html("Records: <span data-bind='text: recordCount'>calculating...</span>");
            $("#searchFilter").on("keyup", function (event) {
                if ($("#searchFilter").val().length === 0) {
                    $('.panel').show();
                } else {
                    $('.panel').hide();
                    $('.panel').filter(function (i,d) {
                        return $(d).attr('id').toLowerCase().indexOf($("#searchFilter").val().toLowerCase()) != -1
                    }).show();
                }
            });

            ko.applyBindings(viewModel);
        });

        $(window).on("hubConnected", function (event) {
            viewModel.queryItems();
        });

        function queueNow(record) {
            if (!hubIsConnected)
                return;

            serviceHub.sendCommand("invoke " + record.Acronym + " QueueTasks");
        }

        function queueAll() {
            for (var i = 0; i < viewModel.items().length; i++) {
                queueNow(viewModel.items()[i]);
            }
        }
    </script>
}
<div class="bs-example">
    <div class="panel-group" id="accordion" data-bind="foreach: items">
        <div class="panel panel-default" data-bind="attr: {id: Acronym + 'Panel'}">
            <div class="panel-heading" >
                <h4 class="panel-title">
                    <a data-toggle="collapse" data-parent="#accordion" data-bind="attr: {id: Acronym+'Heading','data-target': '#sm' + Acronym}, text: Acronym"></a>
                </h4>
            </div>
            <div data-bind="attr: {id: 'sm' + Acronym}" class="panel-collapse collapse">
                <div class="panel-body">
                    @*<div class="">Last Successful Download: <span data-bind="attr: {id: 'lastSuccessful' + Acronym}"></span></div>
                    <div class="">Last Unsuccessful Download: <span data-bind="attr: {id: 'lastUnsuccessful' + Acronym}"></span></div>
                    <div class="">Last Failure Message: <span data-bind="attr: {id: 'lastMessage' + Acronym}"></span></div>*@

                    <div class="table-cell-wrap" data-bind="attr: {id: Acronym + 'Message'}" style="overflow-y: auto; height: 110px; padding: 5px; margin-bottom: 5px; border: 1px solid; border-color: #ddd"></div>
                    <div class="progress" style="margin: 0">
                        <div class="progress-bar progress-bar-striped active no-transition" role="progressbar" style="width: 0%" data-bind="attr: {id: Acronym + 'CurrentProgress'}">0%</div>
                    </div>
                    <div class="progress" style="margin-top: 5px; margin-bottom: -5px">
                        <div class="progress-bar progress-bar-striped active" role="progressbar" style="width: 0%" data-bind="attr: {id: Acronym + 'OverallProgress'}">0%</div>
                    </div>
                </div>
                <div class="panel-footer">
                    <button type="button" class="btn btn-primary" data-bind="click: queueNow.bind($data)">Queue Processing...</button>
                </div>
                </div>
            </div>
        </div>
    </div>
</div>