@*******************************************************************************************************
//  Status.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may
//  not use this file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  01/15/2016 - J. Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using GSF
@using openMIC.Model
@using RazorEngine.Templating
@inherits TemplateBase<AppModel>
@{
    Layout = "Layout.cshtml";
    ViewBag.Title = "Status";
}
@section StyleSheets {
    <style>
        html, body {
            height: 100%;
        }
    </style>
}
@helper SearchFilter()
{
    @* Make sure to use single quotes in this function: *@
    <div class='form-group' style='margin: 0; margin-bottom: 5px'>
        <div class='right-inner-addon'>
            <i class='glyphicon glyphicon-search'></i>
            <input class='form-control' type='search' id='searchFilter' placeholder='Search' />
        </div>
    </div>
}
@section Scripts {
    <script src="Scripts/knockout-3.4.0.js"></script>
    <script>
        const viewModel = {
            items: ko.observableArray(),
            columnLength: ko.observable(4),
            filterText : ""
        };

        viewModel.recordCount = ko.pureComputed({
            read: function () {
                return viewModel.items().length;
            }
        });

        // Return an array of rows where each row is an array of items
        viewModel.rows = ko.computed(function() {
            const result = [];
            const columns = parseInt(this.columnLength(), 10);
            var row;

            for (var i = 0, j = this.items().length; i < j; i++) {
                if (i % columns === 0) {
                    if (row)
                        result.push(row);
                    row = [];
                }
                
                row.push(this.items()[i]);
            }
    
            // Push final row  
            if (row)
                result.push(row);
    
            return result;
        }, viewModel);

        const ProgressState = {
            Undefined: 0,
            Processing: 1,
            Skipped: 2,
            Succeeded: 3,
            Failed: 4
        };

        $(function() {
            dataHubClient.deviceProgressUpdate = function(update) {
                const messageWell = $("#" + update.DeviceName + "Message");

                if (notNull(update.ProgressMessage).length > 0)
                    messageWell.text($("<div />").text(update.ProgressMessage).html());

                $("#" + update.DeviceName + "Heading").text(update.DeviceName + ": " + update.TotalProcessedFiles.toString() + " Downloads");

                const progressBar = $("#" + update.DeviceName + (update.TargetIsOverall ? "Overall" : "Current") + "Progress");
                const progressValue = Math.ceil(update.ProgressComplete / update.ProgressTotal * 100.0);

                if (isNumber(progressValue)) {
                    progressBar.text(progressValue.toString() + "%");
                    progressBar.css("width", progressBar.text());
                }

                if (update.TargetIsOverall) {
                    const panel = $("#" + update.DeviceName + "Panel");
                    panel.removeClass("panel-default panel-info panel-success panel-warning panel-danger");

                    switch (update.State) {
                    case ProgressState.Undefined:
                        panel.addClass("panel-default");
                        break;
                    case ProgressState.Processing:
                        panel.addClass("panel-info");
                        break;
                    case ProgressState.Skipped:
                        panel.addClass("panel-warning");
                        break;
                    case ProgressState.Succeeded:
                        panel.addClass("panel-success");
                        break;
                    case ProgressState.Failed:
                        panel.addClass("panel-danger");
                        break;
                    }
                } else {
                    messageWell.removeClass("bg-success bg-info bg-warning bg-danger");

                    switch (update.State) {
                    case ProgressState.Processing:
                        messageWell.addClass("bg-info");
                        break;
                    case ProgressState.Skipped:
                        messageWell.addClass("bg-warning");
                        break;
                    case ProgressState.Succeeded:
                        messageWell.addClass("bg-success");
                        break;
                    case ProgressState.Failed:
                        messageWell.addClass("bg-danger");
                        break;
                    }
                }
            }

            $("#pageHeader").append("@Raw(SearchFilter().ToString().RemoveDuplicateWhiteSpace().Replace("\r\n", ""))");

            $("#titleText").html("Records: <span data-bind='text: recordCount'>calculating...</span>");

            $("#searchFilter").on("keyup", function (event) {
                if ($("#searchFilter").val().length === 0) {
                    viewModel.filterText = "";
                    loadDevices();
                } else {
                    viewModel.filterText = $("#searchFilter").val();
                    loadDevices();
                }
            });

            ko.applyBindings(viewModel);
        });

        $(window).on("hubConnected", function (event) {
            loadDevices();
        });

        function queueNow(record) {
            if (!hubIsConnected)
                return;

            serviceHub.sendCommand("invoke " + record.Acronym + " QueueTasks");
        }

        function loadDevices() {
            if (!hubIsConnected)
                return;

            dataHub.queryDevices("Acronym", true, 1, 100, viewModel.filterText).done(function (devices){
                viewModel.items.removeAll();
                viewModel.items(devices);
            });
        }
    </script>
}
<div data-bind="foreach: rows">
    <div data-bind="foreach: $data" class="row">
        <div class="col-md-3">
            <div class="panel panel-default" data-bind="attr: {id: Acronym + 'Panel'}">
                <div class="panel-heading" data-bind="attr: {id: Acronym + 'Heading'}, text: Acronym"></div>
                <div class="panel-body">
                    <div class="well well-sm table-cell-hard-wrap" style="overflow-y: auto; height: 100px" data-bind="attr: {id: Acronym + 'Message'}"></div>
                    <div class="progress" style="margin: 0">
                        <div class="progress-bar progress-bar-striped active no-transition" role="progressbar" style="width: 0%" data-bind="attr: {id: Acronym + 'CurrentProgress'}">0%</div>
                    </div>
                    <div class="progress" style="margin-top: 5px; margin-bottom: 0">
                        <div class="progress-bar progress-bar-striped active no-transition" role="progressbar" style="width: 0%" data-bind="attr: {id: Acronym + 'OverallProgress'}" ">0%</div>
                    </div>
                </div>
                <div class="panel-footer">
                    <button type="button" class="btn btn-primary" data-bind="click: queueNow.bind($data)">Queue Processing...</button>
                </div>
            </div>
        </div>
    </div>    
</div>
