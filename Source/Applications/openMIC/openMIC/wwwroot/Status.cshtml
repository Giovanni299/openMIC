@*******************************************************************************************************
//  Status.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may
//  not use this file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  01/15/2016 - J. Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using System
@using System.Linq
@using GSF.Data.Model
@using GSF.Web.Model
@using openMIC.Model
@using RazorEngine.Templating
@inherits TemplateBase<AppModel>
@{
    DataContext dataContext = ViewBag.DataContext;

    Layout = "Layout.cshtml";
    ViewBag.Title = "Status";

    Device[] devices = dataContext.Table<Device>().QueryRecords(restriction: new RecordRestriction("Enabled <> 0")).ToArray();
}
@section StyleSheets {
    <style>
        html, body {
            height: 100%;
        }
    </style>
}
@section Scripts {
    <script>
        var ProgressState = {
            Undefined: 0,
            Processing: 1,
            Skipped: 2,
            Succeeded: 3,
            Failed: 4
        };

        $(function () {
            dataHubClient.deviceProgressUpdate = function (update) {
                const messageWell = $("#" + update.DeviceName + "Message");

                if (notNull(update.ProgressMessage).length > 0)
                    messageWell.text($("<div />").text(update.ProgressMessage).html());

                $("#" + update.DeviceName + "Heading").text(update.DeviceName + ": " + update.TotalProcessedFiles.toString() + " Downloads");

                const progressBar = $("#" + update.DeviceName + (update.TargetIsOverall ? "Overall" : "Current") + "Progress");
                const progressValue = Math.ceil(update.ProgressComplete / update.ProgressTotal * 100.0);

                if (isNumber(progressValue)) {
                    progressBar.text(progressValue.toString() + "%");
                    progressBar.css("width", progressBar.text());
                }

                if (update.TargetIsOverall) {
                    const panel = $("#" + update.DeviceName + "Panel");
                    panel.removeClass("panel-default panel-info panel-success panel-warning panel-danger");

                    switch (update.State) {
                        case ProgressState.Undefined:
                            panel.addClass("panel-default");
                            break;
                        case ProgressState.Processing:
                            panel.addClass("panel-info");
                            break;
                        case ProgressState.Skipped:
                            panel.addClass("panel-warning");
                            break;
                        case ProgressState.Succeeded:
                            panel.addClass("panel-success");
                            break;
                        case ProgressState.Failed:
                            panel.addClass("panel-danger");
                            break;
                    }
                } else {
                    messageWell.removeClass("bg-success bg-info bg-warning bg-danger");

                    switch (update.State) {
                        case ProgressState.Processing:
                            messageWell.addClass("bg-info");
                            break;
                        case ProgressState.Skipped:
                            messageWell.addClass("bg-warning");
                            break;
                        case ProgressState.Succeeded:
                            messageWell.addClass("bg-success");
                            break;
                        case ProgressState.Failed:
                            messageWell.addClass("bg-danger");
                            break;
                    }
                }
            }
        });

        function queueNow (deviceName) {
            if (!hubIsConnected)
                return;

            serviceHub.sendCommand("invoke " + deviceName + " QueueTasks");
        }
    </script>
}
@for (int i = 0; i < devices.Length; i+=4) {
<div class="row">
    @for (int j = i; j < Math.Min(i + 4, devices.Length); j++) {
        string deviceName = devices[j].Acronym;
    <div class="col-md-3">
        <div class="panel panel-default" id="@(deviceName)Panel">
            <div class="panel-heading" id="@(deviceName)Heading">@deviceName</div>
            <div class="panel-body">
                <div class="well well-sm table-cell-hard-wrap" style="overflow-y: auto; height: 100px" id="@(deviceName)Message"></div>
                <div class="progress" style="margin: 0">
                    <div class="progress-bar progress-bar-striped active no-transition" role="progressbar" style="width: 0%" id="@(deviceName)CurrentProgress">0%</div>
                </div>
                <div class="progress" style="margin-top: 5px; margin-bottom: 0">
                    <div class="progress-bar progress-bar-striped active no-transition" role="progressbar" style="width: 0%" id="@(deviceName)OverallProgress">0%</div>
                </div>
            </div>
            <div class="panel-footer">
                <button type="button" class="btn btn-primary" onclick="queueNow('@(deviceName)')">Queue Processing...</button>
            </div>
        </div>
    </div>
    }
</div>
}    